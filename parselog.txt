   yacc.py:3317:Created by PLY version 3.11 (http://www.dabeaz.com/ply)
   yacc.py:3377:
   yacc.py:3378:Grammar
   yacc.py:3379:
   yacc.py:3381:Rule 0     S' -> Program
   yacc.py:3381:Rule 1     Program -> DefinitionList
   yacc.py:3381:Rule 2     DefinitionList -> DefinitionList Definition
   yacc.py:3381:Rule 3     DefinitionList -> empty
   yacc.py:3381:Rule 4     Definition -> ClassDefinition
   yacc.py:3381:Rule 5     Definition -> FunctionDefinition
   yacc.py:3381:Rule 6     ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE
   yacc.py:3381:Rule 7     FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block
   yacc.py:3381:Rule 8     OptClassBase -> COLON ID
   yacc.py:3381:Rule 9     OptClassBase -> empty
   yacc.py:3381:Rule 10    MemberList -> MemberList MemberDefinition
   yacc.py:3381:Rule 11    MemberList -> empty
   yacc.py:3381:Rule 12    MemberDefinition -> OptModifier VAR VariableList SEMICOLON
   yacc.py:3381:Rule 13    MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:3381:Rule 14    OptModifier -> STATIC
   yacc.py:3381:Rule 15    OptModifier -> empty
   yacc.py:3381:Rule 16    VariableList -> VariableList COMMA Variable
   yacc.py:3381:Rule 17    VariableList -> Variable
   yacc.py:3381:Rule 18    Variable -> ID
   yacc.py:3381:Rule 19    Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET
   yacc.py:3381:Rule 20    OptFormArgsList -> FormArgsList
   yacc.py:3381:Rule 21    OptFormArgsList -> empty
   yacc.py:3381:Rule 22    OptEnvClass -> ID COLONCOLON
   yacc.py:3381:Rule 23    OptEnvClass -> empty
   yacc.py:3381:Rule 24    OptParamList -> OptFormArgsList OptTempList
   yacc.py:3381:Rule 25    OptTempList -> SEMICOLON FormArgsList
   yacc.py:3381:Rule 26    OptTempList -> empty
   yacc.py:3381:Rule 27    FormArgsList -> FormArgsList COMMA ID
   yacc.py:3381:Rule 28    FormArgsList -> ID
   yacc.py:3381:Rule 29    Block -> OPENBRACE CommandList CLOSEBRACE
   yacc.py:3381:Rule 30    CommandList -> CommandList Command
   yacc.py:3381:Rule 31    CommandList -> empty
   yacc.py:3381:Rule 32    Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:3381:Rule 33    Command -> IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:3381:Rule 34    Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:3381:Rule 35    Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:3381:Rule 36    Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:3381:Rule 37    Command -> FOREACH ID IN ID Command
   yacc.py:3381:Rule 38    Command -> BREAK SEMICOLON
   yacc.py:3381:Rule 39    Command -> CONTINUE SEMICOLON
   yacc.py:3381:Rule 40    Command -> RETURN OptExp SEMICOLON
   yacc.py:3381:Rule 41    Command -> OptExp SEMICOLON
   yacc.py:3381:Rule 42    Command -> Block
   yacc.py:3381:Rule 43    OptExp -> Exp
   yacc.py:3381:Rule 44    OptExp -> empty
   yacc.py:3381:Rule 45    Exp -> Exp COMMA Exp
   yacc.py:3381:Rule 46    Exp -> LeftVal ATRIB Exp
   yacc.py:3381:Rule 47    Exp -> LeftVal PLUSEQUALS Exp
   yacc.py:3381:Rule 48    Exp -> LeftVal MINUSEQUALS Exp
   yacc.py:3381:Rule 49    Exp -> LeftVal TIMESEQUALS Exp
   yacc.py:3381:Rule 50    Exp -> LeftVal DIVEQUALS Exp
   yacc.py:3381:Rule 51    Exp -> Exp TERNARYIF Exp COLON Exp
   yacc.py:3381:Rule 52    Exp -> Exp OR Exp
   yacc.py:3381:Rule 53    Exp -> Exp AND Exp
   yacc.py:3381:Rule 54    Exp -> Exp BINARYOR Exp
   yacc.py:3381:Rule 55    Exp -> Exp BINARYAND Exp
   yacc.py:3381:Rule 56    Exp -> Exp LESSLESS Exp
   yacc.py:3381:Rule 57    Exp -> Exp GREATERGREATER Exp
   yacc.py:3381:Rule 58    Exp -> Exp EQUALS Exp
   yacc.py:3381:Rule 59    Exp -> Exp NOTEQUALS Exp
   yacc.py:3381:Rule 60    Exp -> Exp GREATEREQUALS Exp
   yacc.py:3381:Rule 61    Exp -> Exp LESSEQUALS Exp
   yacc.py:3381:Rule 62    Exp -> Exp GREATER Exp
   yacc.py:3381:Rule 63    Exp -> Exp LESS Exp
   yacc.py:3381:Rule 64    Exp -> Exp PLUS Exp
   yacc.py:3381:Rule 65    Exp -> Exp MINUS Exp
   yacc.py:3381:Rule 66    Exp -> Exp TIMES Exp
   yacc.py:3381:Rule 67    Exp -> Exp DIV Exp
   yacc.py:3381:Rule 68    Exp -> Exp MOD Exp
   yacc.py:3381:Rule 69    Exp -> MINUSMINUS LeftVal
   yacc.py:3381:Rule 70    Exp -> PLUSPLUS LeftVal
   yacc.py:3381:Rule 71    Exp -> LeftVal MINUSMINUS
   yacc.py:3381:Rule 72    Exp -> LeftVal PLUSPLUS
   yacc.py:3381:Rule 73    Exp -> NOT Exp
   yacc.py:3381:Rule 74    Exp -> TILDE Exp
   yacc.py:3381:Rule 75    Exp -> MINUS Exp
   yacc.py:3381:Rule 76    Exp -> PLUS Exp
   yacc.py:3381:Rule 77    Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:3381:Rule 78    Exp -> ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:3381:Rule 79    Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:3381:Rule 80    Exp -> ID
   yacc.py:3381:Rule 81    Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:3381:Rule 82    Exp -> Number
   yacc.py:3381:Rule 83    Exp -> STRING
   yacc.py:3381:Rule 84    Exp -> NIL
   yacc.py:3381:Rule 85    OptArgs -> Args
   yacc.py:3381:Rule 86    OptArgs -> empty
   yacc.py:3381:Rule 87    Args -> Args COMMA Exp
   yacc.py:3381:Rule 88    Args -> Exp
   yacc.py:3381:Rule 89    LeftVal -> ID
   yacc.py:3381:Rule 90    LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:3381:Rule 91    Number -> FLOAT
   yacc.py:3381:Rule 92    Number -> INT
   yacc.py:3381:Rule 93    empty -> <empty>
   yacc.py:3399:
   yacc.py:3400:Terminals, with rules where they appear
   yacc.py:3401:
   yacc.py:3405:AND                  : 53
   yacc.py:3405:ARROW                : 79
   yacc.py:3405:ATRIB                : 46
   yacc.py:3405:BINARYAND            : 55
   yacc.py:3405:BINARYOR             : 54
   yacc.py:3405:BREAK                : 38
   yacc.py:3405:CLASS                : 6
   yacc.py:3405:CLOSEBRACE           : 6 29
   yacc.py:3405:CLOSEPARENT          : 7 13 32 33 34 35 36 77 78 79
   yacc.py:3405:CLOSESQUAREBRACKET   : 19 81 90
   yacc.py:3405:COLON                : 8 51
   yacc.py:3405:COLONCOLON           : 22
   yacc.py:3405:COMMA                : 16 27 45 87
   yacc.py:3405:CONTINUE             : 39
   yacc.py:3405:DEF                  : 7 13
   yacc.py:3405:DIV                  : 67
   yacc.py:3405:DIVEQUALS            : 50
   yacc.py:3405:DO                   : 35
   yacc.py:3405:ELSE                 : 32
   yacc.py:3405:EQUALS               : 58
   yacc.py:3405:FLOAT                : 91
   yacc.py:3405:FOR                  : 36
   yacc.py:3405:FOREACH              : 37
   yacc.py:3405:GREATER              : 62
   yacc.py:3405:GREATEREQUALS        : 60
   yacc.py:3405:GREATERGREATER       : 57
   yacc.py:3405:ID                   : 6 7 8 13 18 19 22 27 28 37 37 77 78 79 80 81 89 90
   yacc.py:3405:IF                   : 32 33
   yacc.py:3405:IN                   : 37
   yacc.py:3405:INT                  : 92
   yacc.py:3405:LESS                 : 63
   yacc.py:3405:LESSEQUALS           : 61
   yacc.py:3405:LESSLESS             : 56
   yacc.py:3405:MINUS                : 65 75
   yacc.py:3405:MINUSEQUALS          : 48
   yacc.py:3405:MINUSMINUS           : 69 71
   yacc.py:3405:MOD                  : 68
   yacc.py:3405:NEW                  : 77
   yacc.py:3405:NIL                  : 84
   yacc.py:3405:NOT                  : 73
   yacc.py:3405:NOTEQUALS            : 59
   yacc.py:3405:NUMBER               : 19
   yacc.py:3405:OPENBRACE            : 6 29
   yacc.py:3405:OPENPARENT           : 7 13 32 33 34 35 36 77 78 79
   yacc.py:3405:OPENSQUAREBRACKET    : 19 81 90
   yacc.py:3405:OR                   : 52
   yacc.py:3405:PLUS                 : 64 76
   yacc.py:3405:PLUSEQUALS           : 47
   yacc.py:3405:PLUSPLUS             : 70 72
   yacc.py:3405:RETURN               : 40
   yacc.py:3405:SEMICOLON            : 12 13 25 35 36 36 38 39 40 41
   yacc.py:3405:STATIC               : 14
   yacc.py:3405:STRING               : 83
   yacc.py:3405:TERNARYIF            : 51
   yacc.py:3405:TILDE                : 74
   yacc.py:3405:TIMES                : 66
   yacc.py:3405:TIMESEQUALS          : 49
   yacc.py:3405:VAR                  : 12
   yacc.py:3405:WHILE                : 34 35
   yacc.py:3405:error                : 
   yacc.py:3407:
   yacc.py:3408:Nonterminals, with rules where they appear
   yacc.py:3409:
   yacc.py:3413:Args                 : 85 87
   yacc.py:3413:Block                : 7 42
   yacc.py:3413:ClassDefinition      : 4
   yacc.py:3413:Command              : 30 32 32 33 34 35 36 37
   yacc.py:3413:CommandList          : 29 30
   yacc.py:3413:Definition           : 2
   yacc.py:3413:DefinitionList       : 1 2
   yacc.py:3413:Exp                  : 43 45 45 46 47 48 49 50 51 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 73 74 75 76 79 81 87 88 90
   yacc.py:3413:FormArgsList         : 20 25 27
   yacc.py:3413:FunctionDefinition   : 5
   yacc.py:3413:LeftVal              : 46 47 48 49 50 69 70 71 72
   yacc.py:3413:MemberDefinition     : 10
   yacc.py:3413:MemberList           : 6 10
   yacc.py:3413:Number               : 82
   yacc.py:3413:OptArgs              : 77 78 79
   yacc.py:3413:OptClassBase         : 6
   yacc.py:3413:OptEnvClass          : 7
   yacc.py:3413:OptExp               : 32 33 34 35 36 36 36 40 41
   yacc.py:3413:OptFormArgsList      : 13 24
   yacc.py:3413:OptModifier          : 12 13
   yacc.py:3413:OptParamList         : 7
   yacc.py:3413:OptTempList          : 24
   yacc.py:3413:Program              : 0
   yacc.py:3413:Variable             : 16 17
   yacc.py:3413:VariableList         : 12 16
   yacc.py:3413:empty                : 3 9 11 15 21 23 26 31 44 86
   yacc.py:3414:
   yacc.py:2543:Parsing method: LALR
   yacc.py:2561:
   yacc.py:2562:state 0
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> . Program
   yacc.py:2565:    (1) Program -> . DefinitionList
   yacc.py:2565:    (2) DefinitionList -> . DefinitionList Definition
   yacc.py:2565:    (3) DefinitionList -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 93 (empty -> .)
   yacc.py:2687:    DEF             reduce using rule 93 (empty -> .)
   yacc.py:2687:    $end            reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    Program                        shift and go to state 1
   yacc.py:2714:    DefinitionList                 shift and go to state 2
   yacc.py:2714:    empty                          shift and go to state 3
   yacc.py:2561:
   yacc.py:2562:state 1
   yacc.py:2563:
   yacc.py:2565:    (0) S' -> Program .
   yacc.py:2566:
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 2
   yacc.py:2563:
   yacc.py:2565:    (1) Program -> DefinitionList .
   yacc.py:2565:    (2) DefinitionList -> DefinitionList . Definition
   yacc.py:2565:    (4) Definition -> . ClassDefinition
   yacc.py:2565:    (5) Definition -> . FunctionDefinition
   yacc.py:2565:    (6) ClassDefinition -> . CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE
   yacc.py:2565:    (7) FunctionDefinition -> . DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block
   yacc.py:2566:
   yacc.py:2687:    $end            reduce using rule 1 (Program -> DefinitionList .)
   yacc.py:2687:    CLASS           shift and go to state 7
   yacc.py:2687:    DEF             shift and go to state 8
   yacc.py:2689:
   yacc.py:2714:    Definition                     shift and go to state 4
   yacc.py:2714:    ClassDefinition                shift and go to state 5
   yacc.py:2714:    FunctionDefinition             shift and go to state 6
   yacc.py:2561:
   yacc.py:2562:state 3
   yacc.py:2563:
   yacc.py:2565:    (3) DefinitionList -> empty .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 3 (DefinitionList -> empty .)
   yacc.py:2687:    DEF             reduce using rule 3 (DefinitionList -> empty .)
   yacc.py:2687:    $end            reduce using rule 3 (DefinitionList -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 4
   yacc.py:2563:
   yacc.py:2565:    (2) DefinitionList -> DefinitionList Definition .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 2 (DefinitionList -> DefinitionList Definition .)
   yacc.py:2687:    DEF             reduce using rule 2 (DefinitionList -> DefinitionList Definition .)
   yacc.py:2687:    $end            reduce using rule 2 (DefinitionList -> DefinitionList Definition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 5
   yacc.py:2563:
   yacc.py:2565:    (4) Definition -> ClassDefinition .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 4 (Definition -> ClassDefinition .)
   yacc.py:2687:    DEF             reduce using rule 4 (Definition -> ClassDefinition .)
   yacc.py:2687:    $end            reduce using rule 4 (Definition -> ClassDefinition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 6
   yacc.py:2563:
   yacc.py:2565:    (5) Definition -> FunctionDefinition .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 5 (Definition -> FunctionDefinition .)
   yacc.py:2687:    DEF             reduce using rule 5 (Definition -> FunctionDefinition .)
   yacc.py:2687:    $end            reduce using rule 5 (Definition -> FunctionDefinition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 7
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS . ID OptClassBase OPENBRACE MemberList CLOSEBRACE
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 9
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 8
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF . OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block
   yacc.py:2565:    (22) OptEnvClass -> . ID COLONCOLON
   yacc.py:2565:    (23) OptEnvClass -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2609:  ! shift/reduce conflict for ID resolved as shift
   yacc.py:2687:    ID              shift and go to state 11
   yacc.py:2689:
   yacc.py:2696:  ! ID              [ reduce using rule 93 (empty -> .) ]
   yacc.py:2700:
   yacc.py:2714:    OptEnvClass                    shift and go to state 10
   yacc.py:2714:    empty                          shift and go to state 12
   yacc.py:2561:
   yacc.py:2562:state 9
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS ID . OptClassBase OPENBRACE MemberList CLOSEBRACE
   yacc.py:2565:    (8) OptClassBase -> . COLON ID
   yacc.py:2565:    (9) OptClassBase -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 14
   yacc.py:2687:    OPENBRACE       reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    OptClassBase                   shift and go to state 13
   yacc.py:2714:    empty                          shift and go to state 15
   yacc.py:2561:
   yacc.py:2562:state 10
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass . ID OPENPARENT OptParamList CLOSEPARENT Block
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 16
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 11
   yacc.py:2563:
   yacc.py:2565:    (22) OptEnvClass -> ID . COLONCOLON
   yacc.py:2566:
   yacc.py:2687:    COLONCOLON      shift and go to state 17
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 12
   yacc.py:2563:
   yacc.py:2565:    (23) OptEnvClass -> empty .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 23 (OptEnvClass -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 13
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS ID OptClassBase . OPENBRACE MemberList CLOSEBRACE
   yacc.py:2566:
   yacc.py:2687:    OPENBRACE       shift and go to state 18
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 14
   yacc.py:2563:
   yacc.py:2565:    (8) OptClassBase -> COLON . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 19
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 15
   yacc.py:2563:
   yacc.py:2565:    (9) OptClassBase -> empty .
   yacc.py:2566:
   yacc.py:2687:    OPENBRACE       reduce using rule 9 (OptClassBase -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 16
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass ID . OPENPARENT OptParamList CLOSEPARENT Block
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 20
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 17
   yacc.py:2563:
   yacc.py:2565:    (22) OptEnvClass -> ID COLONCOLON .
   yacc.py:2566:
   yacc.py:2687:    ID              reduce using rule 22 (OptEnvClass -> ID COLONCOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 18
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE . MemberList CLOSEBRACE
   yacc.py:2565:    (10) MemberList -> . MemberList MemberDefinition
   yacc.py:2565:    (11) MemberList -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 93 (empty -> .)
   yacc.py:2687:    STATIC          reduce using rule 93 (empty -> .)
   yacc.py:2687:    VAR             reduce using rule 93 (empty -> .)
   yacc.py:2687:    DEF             reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    MemberList                     shift and go to state 21
   yacc.py:2714:    empty                          shift and go to state 22
   yacc.py:2561:
   yacc.py:2562:state 19
   yacc.py:2563:
   yacc.py:2565:    (8) OptClassBase -> COLON ID .
   yacc.py:2566:
   yacc.py:2687:    OPENBRACE       reduce using rule 8 (OptClassBase -> COLON ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 20
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT . OptParamList CLOSEPARENT Block
   yacc.py:2565:    (24) OptParamList -> . OptFormArgsList OptTempList
   yacc.py:2565:    (20) OptFormArgsList -> . FormArgsList
   yacc.py:2565:    (21) OptFormArgsList -> . empty
   yacc.py:2565:    (27) FormArgsList -> . FormArgsList COMMA ID
   yacc.py:2565:    (28) FormArgsList -> . ID
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 23
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    OptParamList                   shift and go to state 24
   yacc.py:2714:    OptFormArgsList                shift and go to state 25
   yacc.py:2714:    FormArgsList                   shift and go to state 26
   yacc.py:2714:    empty                          shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 21
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList . CLOSEBRACE
   yacc.py:2565:    (10) MemberList -> MemberList . MemberDefinition
   yacc.py:2565:    (12) MemberDefinition -> . OptModifier VAR VariableList SEMICOLON
   yacc.py:2565:    (13) MemberDefinition -> . OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:2565:    (14) OptModifier -> . STATIC
   yacc.py:2565:    (15) OptModifier -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      shift and go to state 28
   yacc.py:2687:    STATIC          shift and go to state 31
   yacc.py:2687:    VAR             reduce using rule 93 (empty -> .)
   yacc.py:2687:    DEF             reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    MemberDefinition               shift and go to state 29
   yacc.py:2714:    OptModifier                    shift and go to state 30
   yacc.py:2714:    empty                          shift and go to state 32
   yacc.py:2561:
   yacc.py:2562:state 22
   yacc.py:2563:
   yacc.py:2565:    (11) MemberList -> empty .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 11 (MemberList -> empty .)
   yacc.py:2687:    STATIC          reduce using rule 11 (MemberList -> empty .)
   yacc.py:2687:    VAR             reduce using rule 11 (MemberList -> empty .)
   yacc.py:2687:    DEF             reduce using rule 11 (MemberList -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 23
   yacc.py:2563:
   yacc.py:2565:    (28) FormArgsList -> ID .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 28 (FormArgsList -> ID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 28 (FormArgsList -> ID .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 28 (FormArgsList -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 24
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList . CLOSEPARENT Block
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 33
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 25
   yacc.py:2563:
   yacc.py:2565:    (24) OptParamList -> OptFormArgsList . OptTempList
   yacc.py:2565:    (25) OptTempList -> . SEMICOLON FormArgsList
   yacc.py:2565:    (26) OptTempList -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 35
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    OptTempList                    shift and go to state 34
   yacc.py:2714:    empty                          shift and go to state 36
   yacc.py:2561:
   yacc.py:2562:state 26
   yacc.py:2563:
   yacc.py:2565:    (20) OptFormArgsList -> FormArgsList .
   yacc.py:2565:    (27) FormArgsList -> FormArgsList . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 20 (OptFormArgsList -> FormArgsList .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 20 (OptFormArgsList -> FormArgsList .)
   yacc.py:2687:    COMMA           shift and go to state 37
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 27
   yacc.py:2563:
   yacc.py:2565:    (21) OptFormArgsList -> empty .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 21 (OptFormArgsList -> empty .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 21 (OptFormArgsList -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 28
   yacc.py:2563:
   yacc.py:2565:    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)
   yacc.py:2687:    DEF             reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)
   yacc.py:2687:    $end            reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 29
   yacc.py:2563:
   yacc.py:2565:    (10) MemberList -> MemberList MemberDefinition .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
   yacc.py:2687:    STATIC          reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
   yacc.py:2687:    VAR             reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
   yacc.py:2687:    DEF             reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 30
   yacc.py:2563:
   yacc.py:2565:    (12) MemberDefinition -> OptModifier . VAR VariableList SEMICOLON
   yacc.py:2565:    (13) MemberDefinition -> OptModifier . DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    VAR             shift and go to state 38
   yacc.py:2687:    DEF             shift and go to state 39
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 31
   yacc.py:2563:
   yacc.py:2565:    (14) OptModifier -> STATIC .
   yacc.py:2566:
   yacc.py:2687:    VAR             reduce using rule 14 (OptModifier -> STATIC .)
   yacc.py:2687:    DEF             reduce using rule 14 (OptModifier -> STATIC .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 32
   yacc.py:2563:
   yacc.py:2565:    (15) OptModifier -> empty .
   yacc.py:2566:
   yacc.py:2687:    VAR             reduce using rule 15 (OptModifier -> empty .)
   yacc.py:2687:    DEF             reduce using rule 15 (OptModifier -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 33
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT . Block
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2566:
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2689:
   yacc.py:2714:    Block                          shift and go to state 40
   yacc.py:2561:
   yacc.py:2562:state 34
   yacc.py:2563:
   yacc.py:2565:    (24) OptParamList -> OptFormArgsList OptTempList .
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 24 (OptParamList -> OptFormArgsList OptTempList .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 35
   yacc.py:2563:
   yacc.py:2565:    (25) OptTempList -> SEMICOLON . FormArgsList
   yacc.py:2565:    (27) FormArgsList -> . FormArgsList COMMA ID
   yacc.py:2565:    (28) FormArgsList -> . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 23
   yacc.py:2689:
   yacc.py:2714:    FormArgsList                   shift and go to state 42
   yacc.py:2561:
   yacc.py:2562:state 36
   yacc.py:2563:
   yacc.py:2565:    (26) OptTempList -> empty .
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 26 (OptTempList -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 37
   yacc.py:2563:
   yacc.py:2565:    (27) FormArgsList -> FormArgsList COMMA . ID
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 43
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 38
   yacc.py:2563:
   yacc.py:2565:    (12) MemberDefinition -> OptModifier VAR . VariableList SEMICOLON
   yacc.py:2565:    (16) VariableList -> . VariableList COMMA Variable
   yacc.py:2565:    (17) VariableList -> . Variable
   yacc.py:2565:    (18) Variable -> . ID
   yacc.py:2565:    (19) Variable -> . ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 46
   yacc.py:2689:
   yacc.py:2714:    VariableList                   shift and go to state 44
   yacc.py:2714:    Variable                       shift and go to state 45
   yacc.py:2561:
   yacc.py:2562:state 39
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF . ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 47
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 40
   yacc.py:2563:
   yacc.py:2565:    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)
   yacc.py:2687:    DEF             reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)
   yacc.py:2687:    $end            reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 41
   yacc.py:2563:
   yacc.py:2565:    (29) Block -> OPENBRACE . CommandList CLOSEBRACE
   yacc.py:2565:    (30) CommandList -> . CommandList Command
   yacc.py:2565:    (31) CommandList -> . empty
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 93 (empty -> .)
   yacc.py:2687:    IF              reduce using rule 93 (empty -> .)
   yacc.py:2687:    WHILE           reduce using rule 93 (empty -> .)
   yacc.py:2687:    DO              reduce using rule 93 (empty -> .)
   yacc.py:2687:    FOR             reduce using rule 93 (empty -> .)
   yacc.py:2687:    FOREACH         reduce using rule 93 (empty -> .)
   yacc.py:2687:    BREAK           reduce using rule 93 (empty -> .)
   yacc.py:2687:    CONTINUE        reduce using rule 93 (empty -> .)
   yacc.py:2687:    RETURN          reduce using rule 93 (empty -> .)
   yacc.py:2687:    OPENBRACE       reduce using rule 93 (empty -> .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 93 (empty -> .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 93 (empty -> .)
   yacc.py:2687:    NOT             reduce using rule 93 (empty -> .)
   yacc.py:2687:    TILDE           reduce using rule 93 (empty -> .)
   yacc.py:2687:    MINUS           reduce using rule 93 (empty -> .)
   yacc.py:2687:    PLUS            reduce using rule 93 (empty -> .)
   yacc.py:2687:    NEW             reduce using rule 93 (empty -> .)
   yacc.py:2687:    ID              reduce using rule 93 (empty -> .)
   yacc.py:2687:    STRING          reduce using rule 93 (empty -> .)
   yacc.py:2687:    NIL             reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           reduce using rule 93 (empty -> .)
   yacc.py:2687:    INT             reduce using rule 93 (empty -> .)
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    CommandList                    shift and go to state 48
   yacc.py:2714:    empty                          shift and go to state 49
   yacc.py:2561:
   yacc.py:2562:state 42
   yacc.py:2563:
   yacc.py:2565:    (25) OptTempList -> SEMICOLON FormArgsList .
   yacc.py:2565:    (27) FormArgsList -> FormArgsList . COMMA ID
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 25 (OptTempList -> SEMICOLON FormArgsList .)
   yacc.py:2687:    COMMA           shift and go to state 37
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 43
   yacc.py:2563:
   yacc.py:2565:    (27) FormArgsList -> FormArgsList COMMA ID .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 27 (FormArgsList -> FormArgsList COMMA ID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 27 (FormArgsList -> FormArgsList COMMA ID .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 27 (FormArgsList -> FormArgsList COMMA ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 44
   yacc.py:2563:
   yacc.py:2565:    (12) MemberDefinition -> OptModifier VAR VariableList . SEMICOLON
   yacc.py:2565:    (16) VariableList -> VariableList . COMMA Variable
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 50
   yacc.py:2687:    COMMA           shift and go to state 51
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 45
   yacc.py:2563:
   yacc.py:2565:    (17) VariableList -> Variable .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 17 (VariableList -> Variable .)
   yacc.py:2687:    COMMA           reduce using rule 17 (VariableList -> Variable .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 46
   yacc.py:2563:
   yacc.py:2565:    (18) Variable -> ID .
   yacc.py:2565:    (19) Variable -> ID . OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 18 (Variable -> ID .)
   yacc.py:2687:    COMMA           reduce using rule 18 (Variable -> ID .)
   yacc.py:2687:    OPENSQUAREBRACKET shift and go to state 52
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 47
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF ID . OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 53
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 48
   yacc.py:2563:
   yacc.py:2565:    (29) Block -> OPENBRACE CommandList . CLOSEBRACE
   yacc.py:2565:    (30) CommandList -> CommandList . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      shift and go to state 54
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Command                        shift and go to state 55
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 49
   yacc.py:2563:
   yacc.py:2565:    (31) CommandList -> empty .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    IF              reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    WHILE           reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    DO              reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    FOR             reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    FOREACH         reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    BREAK           reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    CONTINUE        reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    RETURN          reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    OPENBRACE       reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    NOT             reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    TILDE           reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    MINUS           reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    PLUS            reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    NEW             reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    ID              reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    STRING          reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    NIL             reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    FLOAT           reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    INT             reduce using rule 31 (CommandList -> empty .)
   yacc.py:2687:    SEMICOLON       reduce using rule 31 (CommandList -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 50
   yacc.py:2563:
   yacc.py:2565:    (12) MemberDefinition -> OptModifier VAR VariableList SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
   yacc.py:2687:    STATIC          reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
   yacc.py:2687:    VAR             reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
   yacc.py:2687:    DEF             reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 51
   yacc.py:2563:
   yacc.py:2565:    (16) VariableList -> VariableList COMMA . Variable
   yacc.py:2565:    (18) Variable -> . ID
   yacc.py:2565:    (19) Variable -> . ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 46
   yacc.py:2689:
   yacc.py:2714:    Variable                       shift and go to state 82
   yacc.py:2561:
   yacc.py:2562:state 52
   yacc.py:2563:
   yacc.py:2565:    (19) Variable -> ID OPENSQUAREBRACKET . NUMBER CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    NUMBER          shift and go to state 83
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 53
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT . OptFormArgsList CLOSEPARENT SEMICOLON
   yacc.py:2565:    (20) OptFormArgsList -> . FormArgsList
   yacc.py:2565:    (21) OptFormArgsList -> . empty
   yacc.py:2565:    (27) FormArgsList -> . FormArgsList COMMA ID
   yacc.py:2565:    (28) FormArgsList -> . ID
   yacc.py:2565:    (93) empty -> .
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 23
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2689:
   yacc.py:2714:    OptFormArgsList                shift and go to state 84
   yacc.py:2714:    FormArgsList                   shift and go to state 26
   yacc.py:2714:    empty                          shift and go to state 27
   yacc.py:2561:
   yacc.py:2562:state 54
   yacc.py:2563:
   yacc.py:2565:    (29) Block -> OPENBRACE CommandList CLOSEBRACE .
   yacc.py:2566:
   yacc.py:2687:    CLASS           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    DEF             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    $end            reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    CLOSEBRACE      reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    IF              reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    WHILE           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    DO              reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    FOR             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    FOREACH         reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    BREAK           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    CONTINUE        reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    RETURN          reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    OPENBRACE       reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    NOT             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    TILDE           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    MINUS           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    PLUS            reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    NEW             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    ID              reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    STRING          reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    NIL             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    FLOAT           reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    INT             reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    SEMICOLON       reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2687:    ELSE            reduce using rule 29 (Block -> OPENBRACE CommandList CLOSEBRACE .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 55
   yacc.py:2563:
   yacc.py:2565:    (30) CommandList -> CommandList Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    IF              reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    WHILE           reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    DO              reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    FOR             reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    FOREACH         reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    BREAK           reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    RETURN          reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    NOT             reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    TILDE           reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    MINUS           reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    PLUS            reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    NEW             reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    ID              reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    STRING          reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    NIL             reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    FLOAT           reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    INT             reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 30 (CommandList -> CommandList Command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 56
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF . OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> IF . OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 85
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 57
   yacc.py:2563:
   yacc.py:2565:    (41) Command -> OptExp . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 86
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 58
   yacc.py:2563:
   yacc.py:2565:    (34) Command -> WHILE . OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 87
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 59
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO . Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Command                        shift and go to state 88
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 60
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR . OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 89
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 61
   yacc.py:2563:
   yacc.py:2565:    (37) Command -> FOREACH . ID IN ID Command
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 90
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 62
   yacc.py:2563:
   yacc.py:2565:    (78) Exp -> ID . OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> ID .
   yacc.py:2565:    (81) Exp -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (89) LeftVal -> ID .
   yacc.py:2565:    (90) LeftVal -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 91
   yacc.py:2687:    COMMA           reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    TERNARYIF       reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    OR              reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    AND             reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    BINARYOR        reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    BINARYAND       reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    LESSLESS        reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    EQUALS          reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    GREATER         reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    LESS            reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    PLUS            reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    MINUS           reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    TIMES           reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    DIV             reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    MOD             reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    ARROW           reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    COLON           reduce using rule 80 (Exp -> ID .)
   yacc.py:2687:    OPENSQUAREBRACKET shift and go to state 92
   yacc.py:2687:    ATRIB           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    PLUSEQUALS      reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    MINUSEQUALS     reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    TIMESEQUALS     reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    DIVEQUALS       reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 63
   yacc.py:2563:
   yacc.py:2565:    (38) Command -> BREAK . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 93
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 64
   yacc.py:2563:
   yacc.py:2565:    (39) Command -> CONTINUE . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 94
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 65
   yacc.py:2563:
   yacc.py:2565:    (40) Command -> RETURN . OptExp SEMICOLON
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 95
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 66
   yacc.py:2563:
   yacc.py:2565:    (42) Command -> Block .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    IF              reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    WHILE           reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    DO              reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    FOR             reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    FOREACH         reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    BREAK           reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    CONTINUE        reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    RETURN          reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    OPENBRACE       reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    NOT             reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    TILDE           reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    MINUS           reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    PLUS            reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    NEW             reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    ID              reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    STRING          reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    NIL             reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    FLOAT           reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    INT             reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    SEMICOLON       reduce using rule 42 (Command -> Block .)
   yacc.py:2687:    ELSE            reduce using rule 42 (Command -> Block .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 67
   yacc.py:2563:
   yacc.py:2565:    (43) OptExp -> Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 43 (OptExp -> Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 43 (OptExp -> Exp .)
   yacc.py:2687:    COMMA           shift and go to state 96
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 68
   yacc.py:2563:
   yacc.py:2565:    (44) OptExp -> empty .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 44 (OptExp -> empty .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 44 (OptExp -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 69
   yacc.py:2563:
   yacc.py:2565:    (46) Exp -> LeftVal . ATRIB Exp
   yacc.py:2565:    (47) Exp -> LeftVal . PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> LeftVal . MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> LeftVal . TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> LeftVal . DIVEQUALS Exp
   yacc.py:2565:    (71) Exp -> LeftVal . MINUSMINUS
   yacc.py:2565:    (72) Exp -> LeftVal . PLUSPLUS
   yacc.py:2566:
   yacc.py:2687:    ATRIB           shift and go to state 116
   yacc.py:2687:    PLUSEQUALS      shift and go to state 117
   yacc.py:2687:    MINUSEQUALS     shift and go to state 118
   yacc.py:2687:    TIMESEQUALS     shift and go to state 119
   yacc.py:2687:    DIVEQUALS       shift and go to state 120
   yacc.py:2687:    MINUSMINUS      shift and go to state 121
   yacc.py:2687:    PLUSPLUS        shift and go to state 122
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 70
   yacc.py:2563:
   yacc.py:2565:    (76) Exp -> PLUS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 123
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 71
   yacc.py:2563:
   yacc.py:2565:    (75) Exp -> MINUS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 124
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 72
   yacc.py:2563:
   yacc.py:2565:    (69) Exp -> MINUSMINUS . LeftVal
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 126
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 125
   yacc.py:2561:
   yacc.py:2562:state 73
   yacc.py:2563:
   yacc.py:2565:    (70) Exp -> PLUSPLUS . LeftVal
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 126
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 127
   yacc.py:2561:
   yacc.py:2562:state 74
   yacc.py:2563:
   yacc.py:2565:    (73) Exp -> NOT . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 128
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 75
   yacc.py:2563:
   yacc.py:2565:    (74) Exp -> TILDE . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 129
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 76
   yacc.py:2563:
   yacc.py:2565:    (77) Exp -> NEW . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 130
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 77
   yacc.py:2563:
   yacc.py:2565:    (82) Exp -> Number .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    TERNARYIF       reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    OR              reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    AND             reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    BINARYOR        reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    BINARYAND       reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    LESSLESS        reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    EQUALS          reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    GREATER         reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    LESS            reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    PLUS            reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    MINUS           reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    TIMES           reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    DIV             reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    MOD             reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    ARROW           reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    SEMICOLON       reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 82 (Exp -> Number .)
   yacc.py:2687:    COLON           reduce using rule 82 (Exp -> Number .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 78
   yacc.py:2563:
   yacc.py:2565:    (83) Exp -> STRING .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    TERNARYIF       reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    OR              reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    AND             reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    BINARYOR        reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    BINARYAND       reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    LESSLESS        reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    EQUALS          reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    GREATER         reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    LESS            reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    PLUS            reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    MINUS           reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    TIMES           reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    DIV             reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    MOD             reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    ARROW           reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    SEMICOLON       reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 83 (Exp -> STRING .)
   yacc.py:2687:    COLON           reduce using rule 83 (Exp -> STRING .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 79
   yacc.py:2563:
   yacc.py:2565:    (84) Exp -> NIL .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    TERNARYIF       reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    OR              reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    AND             reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    BINARYOR        reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    BINARYAND       reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    LESSLESS        reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    EQUALS          reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    GREATER         reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    LESS            reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    PLUS            reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    MINUS           reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    TIMES           reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    DIV             reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    MOD             reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    ARROW           reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    SEMICOLON       reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 84 (Exp -> NIL .)
   yacc.py:2687:    COLON           reduce using rule 84 (Exp -> NIL .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 80
   yacc.py:2563:
   yacc.py:2565:    (91) Number -> FLOAT .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    TERNARYIF       reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    OR              reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    AND             reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    BINARYOR        reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    BINARYAND       reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    LESSLESS        reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    EQUALS          reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    GREATER         reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    LESS            reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    PLUS            reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    MINUS           reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    TIMES           reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    DIV             reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    MOD             reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    ARROW           reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2687:    COLON           reduce using rule 91 (Number -> FLOAT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 81
   yacc.py:2563:
   yacc.py:2565:    (92) Number -> INT .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    TERNARYIF       reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    OR              reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    AND             reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    BINARYOR        reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    BINARYAND       reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    LESSLESS        reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    EQUALS          reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    GREATER         reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    LESS            reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    PLUS            reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    MINUS           reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    TIMES           reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    DIV             reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    MOD             reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    ARROW           reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 92 (Number -> INT .)
   yacc.py:2687:    COLON           reduce using rule 92 (Number -> INT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 82
   yacc.py:2563:
   yacc.py:2565:    (16) VariableList -> VariableList COMMA Variable .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 16 (VariableList -> VariableList COMMA Variable .)
   yacc.py:2687:    COMMA           reduce using rule 16 (VariableList -> VariableList COMMA Variable .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 83
   yacc.py:2563:
   yacc.py:2565:    (19) Variable -> ID OPENSQUAREBRACKET NUMBER . CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    CLOSESQUAREBRACKET shift and go to state 131
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 84
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList . CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 132
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 85
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT . OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> IF OPENPARENT . OptExp CLOSEPARENT Command
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 133
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 86
   yacc.py:2563:
   yacc.py:2565:    (41) Command -> OptExp SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    DO              reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    FOREACH         reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    BREAK           reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    CONTINUE        reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    RETURN          reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    OPENBRACE       reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    NOT             reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    TILDE           reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    MINUS           reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    PLUS            reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    NEW             reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    ID              reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    STRING          reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    NIL             reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    FLOAT           reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    INT             reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    SEMICOLON       reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 41 (Command -> OptExp SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 87
   yacc.py:2563:
   yacc.py:2565:    (34) Command -> WHILE OPENPARENT . OptExp CLOSEPARENT Command
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 134
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 88
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command . WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    WHILE           shift and go to state 135
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 89
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT . OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 136
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 90
   yacc.py:2563:
   yacc.py:2565:    (37) Command -> FOREACH ID . IN ID Command
   yacc.py:2566:
   yacc.py:2687:    IN              shift and go to state 137
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 91
   yacc.py:2563:
   yacc.py:2565:    (78) Exp -> ID OPENPARENT . OptArgs CLOSEPARENT
   yacc.py:2565:    (85) OptArgs -> . Args
   yacc.py:2565:    (86) OptArgs -> . empty
   yacc.py:2565:    (87) Args -> . Args COMMA Exp
   yacc.py:2565:    (88) Args -> . Exp
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptArgs                        shift and go to state 138
   yacc.py:2714:    Args                           shift and go to state 139
   yacc.py:2714:    empty                          shift and go to state 140
   yacc.py:2714:    Exp                            shift and go to state 141
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 92
   yacc.py:2563:
   yacc.py:2565:    (81) Exp -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 142
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 93
   yacc.py:2563:
   yacc.py:2565:    (38) Command -> BREAK SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    DO              reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    FOREACH         reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    BREAK           reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    CONTINUE        reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    RETURN          reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    OPENBRACE       reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    NOT             reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    TILDE           reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    MINUS           reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    PLUS            reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    NEW             reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    ID              reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    STRING          reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    NIL             reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    FLOAT           reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    INT             reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    SEMICOLON       reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 38 (Command -> BREAK SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 94
   yacc.py:2563:
   yacc.py:2565:    (39) Command -> CONTINUE SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    DO              reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    FOREACH         reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    BREAK           reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    CONTINUE        reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    RETURN          reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    OPENBRACE       reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    NOT             reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    TILDE           reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    MINUS           reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    PLUS            reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    NEW             reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    ID              reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    STRING          reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    NIL             reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    FLOAT           reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    INT             reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    SEMICOLON       reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 39 (Command -> CONTINUE SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 95
   yacc.py:2563:
   yacc.py:2565:    (40) Command -> RETURN OptExp . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 143
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 96
   yacc.py:2563:
   yacc.py:2565:    (45) Exp -> Exp COMMA . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 144
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 97
   yacc.py:2563:
   yacc.py:2565:    (51) Exp -> Exp TERNARYIF . Exp COLON Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 145
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 98
   yacc.py:2563:
   yacc.py:2565:    (52) Exp -> Exp OR . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 146
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 99
   yacc.py:2563:
   yacc.py:2565:    (53) Exp -> Exp AND . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 147
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 100
   yacc.py:2563:
   yacc.py:2565:    (54) Exp -> Exp BINARYOR . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 148
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 101
   yacc.py:2563:
   yacc.py:2565:    (55) Exp -> Exp BINARYAND . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 149
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 102
   yacc.py:2563:
   yacc.py:2565:    (56) Exp -> Exp LESSLESS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 150
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 103
   yacc.py:2563:
   yacc.py:2565:    (57) Exp -> Exp GREATERGREATER . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 151
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 104
   yacc.py:2563:
   yacc.py:2565:    (58) Exp -> Exp EQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 152
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 105
   yacc.py:2563:
   yacc.py:2565:    (59) Exp -> Exp NOTEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 153
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 106
   yacc.py:2563:
   yacc.py:2565:    (60) Exp -> Exp GREATEREQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 154
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 107
   yacc.py:2563:
   yacc.py:2565:    (61) Exp -> Exp LESSEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 155
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 108
   yacc.py:2563:
   yacc.py:2565:    (62) Exp -> Exp GREATER . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 156
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 109
   yacc.py:2563:
   yacc.py:2565:    (63) Exp -> Exp LESS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 157
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 110
   yacc.py:2563:
   yacc.py:2565:    (64) Exp -> Exp PLUS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 158
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 111
   yacc.py:2563:
   yacc.py:2565:    (65) Exp -> Exp MINUS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 159
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 112
   yacc.py:2563:
   yacc.py:2565:    (66) Exp -> Exp TIMES . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 160
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 113
   yacc.py:2563:
   yacc.py:2565:    (67) Exp -> Exp DIV . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 161
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 114
   yacc.py:2563:
   yacc.py:2565:    (68) Exp -> Exp MOD . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 162
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 115
   yacc.py:2563:
   yacc.py:2565:    (79) Exp -> Exp ARROW . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 163
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 116
   yacc.py:2563:
   yacc.py:2565:    (46) Exp -> LeftVal ATRIB . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Exp                            shift and go to state 164
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 117
   yacc.py:2563:
   yacc.py:2565:    (47) Exp -> LeftVal PLUSEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Exp                            shift and go to state 165
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 118
   yacc.py:2563:
   yacc.py:2565:    (48) Exp -> LeftVal MINUSEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Exp                            shift and go to state 166
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 119
   yacc.py:2563:
   yacc.py:2565:    (49) Exp -> LeftVal TIMESEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Exp                            shift and go to state 167
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 120
   yacc.py:2563:
   yacc.py:2565:    (50) Exp -> LeftVal DIVEQUALS . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Exp                            shift and go to state 168
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 121
   yacc.py:2563:
   yacc.py:2565:    (71) Exp -> LeftVal MINUSMINUS .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    TERNARYIF       reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    OR              reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    AND             reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    BINARYOR        reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    BINARYAND       reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    LESSLESS        reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    EQUALS          reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    GREATER         reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    LESS            reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    PLUS            reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    MINUS           reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    TIMES           reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    DIV             reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    MOD             reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    ARROW           reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    SEMICOLON       reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2687:    COLON           reduce using rule 71 (Exp -> LeftVal MINUSMINUS .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 122
   yacc.py:2563:
   yacc.py:2565:    (72) Exp -> LeftVal PLUSPLUS .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    TERNARYIF       reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    OR              reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    AND             reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    BINARYOR        reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    BINARYAND       reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    LESSLESS        reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    EQUALS          reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    GREATER         reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    LESS            reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    PLUS            reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    MINUS           reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    TIMES           reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    DIV             reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    MOD             reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    ARROW           reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    SEMICOLON       reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2687:    COLON           reduce using rule 72 (Exp -> LeftVal PLUSPLUS .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 123
   yacc.py:2563:
   yacc.py:2565:    (76) Exp -> PLUS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    OR              reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    AND             reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    LESS            reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    PLUS            reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    MINUS           reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    TIMES           reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    DIV             reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    MOD             reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    COLON           reduce using rule 76 (Exp -> PLUS Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 76 (Exp -> PLUS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 124
   yacc.py:2563:
   yacc.py:2565:    (75) Exp -> MINUS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    OR              reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    AND             reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    LESS            reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    PLUS            reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    MINUS           reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    TIMES           reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    DIV             reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    MOD             reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    COLON           reduce using rule 75 (Exp -> MINUS Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 75 (Exp -> MINUS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 125
   yacc.py:2563:
   yacc.py:2565:    (69) Exp -> MINUSMINUS LeftVal .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    TERNARYIF       reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    OR              reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    AND             reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    BINARYOR        reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    BINARYAND       reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    LESSLESS        reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    EQUALS          reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    GREATER         reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    LESS            reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    PLUS            reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    MINUS           reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    TIMES           reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    DIV             reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    MOD             reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    ARROW           reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    SEMICOLON       reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2687:    COLON           reduce using rule 69 (Exp -> MINUSMINUS LeftVal .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 126
   yacc.py:2563:
   yacc.py:2565:    (89) LeftVal -> ID .
   yacc.py:2565:    (90) LeftVal -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    TERNARYIF       reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    OR              reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    AND             reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    BINARYOR        reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    BINARYAND       reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    LESSLESS        reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    EQUALS          reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    GREATER         reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    LESS            reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    PLUS            reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    MINUS           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    TIMES           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    DIV             reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    MOD             reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    ARROW           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    SEMICOLON       reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    COLON           reduce using rule 89 (LeftVal -> ID .)
   yacc.py:2687:    OPENSQUAREBRACKET shift and go to state 169
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 127
   yacc.py:2563:
   yacc.py:2565:    (70) Exp -> PLUSPLUS LeftVal .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    TERNARYIF       reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    OR              reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    AND             reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    BINARYOR        reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    BINARYAND       reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    LESSLESS        reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    EQUALS          reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    GREATER         reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    LESS            reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    PLUS            reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    MINUS           reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    TIMES           reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    DIV             reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    MOD             reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    ARROW           reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    SEMICOLON       reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2687:    COLON           reduce using rule 70 (Exp -> PLUSPLUS LeftVal .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 128
   yacc.py:2563:
   yacc.py:2565:    (73) Exp -> NOT Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    OR              reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    AND             reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    GREATER         reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    LESS            reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    PLUS            reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    MINUS           reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    TIMES           reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    DIV             reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    MOD             reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    COLON           reduce using rule 73 (Exp -> NOT Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 73 (Exp -> NOT Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 129
   yacc.py:2563:
   yacc.py:2565:    (74) Exp -> TILDE Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    OR              reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    AND             reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    GREATER         reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    LESS            reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    PLUS            reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    MINUS           reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    TIMES           reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    DIV             reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    MOD             reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    COLON           reduce using rule 74 (Exp -> TILDE Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 74 (Exp -> TILDE Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 130
   yacc.py:2563:
   yacc.py:2565:    (77) Exp -> NEW ID . OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 170
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 131
   yacc.py:2563:
   yacc.py:2565:    (19) Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       reduce using rule 19 (Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .)
   yacc.py:2687:    COMMA           reduce using rule 19 (Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 132
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 171
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 133
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT OptExp . CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> IF OPENPARENT OptExp . CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 172
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 134
   yacc.py:2563:
   yacc.py:2565:    (34) Command -> WHILE OPENPARENT OptExp . CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 173
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 135
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command WHILE . OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 174
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 136
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp . SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 175
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 137
   yacc.py:2563:
   yacc.py:2565:    (37) Command -> FOREACH ID IN . ID Command
   yacc.py:2566:
   yacc.py:2687:    ID              shift and go to state 176
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 138
   yacc.py:2563:
   yacc.py:2565:    (78) Exp -> ID OPENPARENT OptArgs . CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 177
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 139
   yacc.py:2563:
   yacc.py:2565:    (85) OptArgs -> Args .
   yacc.py:2565:    (87) Args -> Args . COMMA Exp
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 85 (OptArgs -> Args .)
   yacc.py:2687:    COMMA           shift and go to state 178
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 140
   yacc.py:2563:
   yacc.py:2565:    (86) OptArgs -> empty .
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 86 (OptArgs -> empty .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 141
   yacc.py:2563:
   yacc.py:2565:    (88) Args -> Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2666:  ! shift/reduce conflict for COMMA resolved as shift
   yacc.py:2687:    CLOSEPARENT     reduce using rule 88 (Args -> Exp .)
   yacc.py:2687:    COMMA           shift and go to state 96
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! COMMA           [ reduce using rule 88 (Args -> Exp .) ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 142
   yacc.py:2563:
   yacc.py:2565:    (81) Exp -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    CLOSESQUAREBRACKET shift and go to state 179
   yacc.py:2687:    COMMA           shift and go to state 96
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 143
   yacc.py:2563:
   yacc.py:2565:    (40) Command -> RETURN OptExp SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    DO              reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    FOREACH         reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    BREAK           reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    CONTINUE        reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    RETURN          reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    OPENBRACE       reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    NOT             reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    TILDE           reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    MINUS           reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    PLUS            reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    NEW             reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    ID              reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    STRING          reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    NIL             reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    FLOAT           reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    INT             reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    SEMICOLON       reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 40 (Command -> RETURN OptExp SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 144
   yacc.py:2563:
   yacc.py:2565:    (45) Exp -> Exp COMMA Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 45 (Exp -> Exp COMMA Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 45 (Exp -> Exp COMMA Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 45 (Exp -> Exp COMMA Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 45 (Exp -> Exp COMMA Exp .)
   yacc.py:2687:    COLON           reduce using rule 45 (Exp -> Exp COMMA Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 45 (Exp -> Exp COMMA Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 145
   yacc.py:2563:
   yacc.py:2565:    (51) Exp -> Exp TERNARYIF Exp . COLON Exp
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COLON           shift and go to state 180
   yacc.py:2687:    COMMA           shift and go to state 96
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 146
   yacc.py:2563:
   yacc.py:2565:    (52) Exp -> Exp OR Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    OR              reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    COLON           reduce using rule 52 (Exp -> Exp OR Exp .)
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! AND             [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 52 (Exp -> Exp OR Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 147
   yacc.py:2563:
   yacc.py:2565:    (53) Exp -> Exp AND Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    OR              reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    AND             reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    COLON           reduce using rule 53 (Exp -> Exp AND Exp .)
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 53 (Exp -> Exp AND Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 148
   yacc.py:2563:
   yacc.py:2565:    (54) Exp -> Exp BINARYOR Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    OR              reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    AND             reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    COLON           reduce using rule 54 (Exp -> Exp BINARYOR Exp .)
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 54 (Exp -> Exp BINARYOR Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 149
   yacc.py:2563:
   yacc.py:2565:    (55) Exp -> Exp BINARYAND Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    OR              reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    AND             reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    COLON           reduce using rule 55 (Exp -> Exp BINARYAND Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 55 (Exp -> Exp BINARYAND Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 150
   yacc.py:2563:
   yacc.py:2565:    (56) Exp -> Exp LESSLESS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    OR              reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    AND             reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    LESS            reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    COLON           reduce using rule 56 (Exp -> Exp LESSLESS Exp .)
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! PLUS            [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 56 (Exp -> Exp LESSLESS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 151
   yacc.py:2563:
   yacc.py:2565:    (57) Exp -> Exp GREATERGREATER Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    OR              reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    AND             reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    GREATER         reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    LESS            reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    COLON           reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .)
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! PLUS            [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 57 (Exp -> Exp GREATERGREATER Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 152
   yacc.py:2563:
   yacc.py:2565:    (58) Exp -> Exp EQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    OR              reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    AND             reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 58 (Exp -> Exp EQUALS Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 58 (Exp -> Exp EQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 153
   yacc.py:2563:
   yacc.py:2565:    (59) Exp -> Exp NOTEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    OR              reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    AND             reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 59 (Exp -> Exp NOTEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 154
   yacc.py:2563:
   yacc.py:2565:    (60) Exp -> Exp GREATEREQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    OR              reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    AND             reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    LESS            reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 60 (Exp -> Exp GREATEREQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 155
   yacc.py:2563:
   yacc.py:2565:    (61) Exp -> Exp LESSEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    OR              reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    AND             reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    LESS            reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 61 (Exp -> Exp LESSEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 156
   yacc.py:2563:
   yacc.py:2565:    (62) Exp -> Exp GREATER Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    OR              reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    AND             reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    GREATER         reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    LESS            reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    COLON           reduce using rule 62 (Exp -> Exp GREATER Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 62 (Exp -> Exp GREATER Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 157
   yacc.py:2563:
   yacc.py:2565:    (63) Exp -> Exp LESS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    OR              reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    AND             reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    LESS            reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    COLON           reduce using rule 63 (Exp -> Exp LESS Exp .)
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 63 (Exp -> Exp LESS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 158
   yacc.py:2563:
   yacc.py:2565:    (64) Exp -> Exp PLUS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    OR              reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    AND             reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    LESS            reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    PLUS            reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    MINUS           reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    COLON           reduce using rule 64 (Exp -> Exp PLUS Exp .)
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TIMES           [ reduce using rule 64 (Exp -> Exp PLUS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 64 (Exp -> Exp PLUS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 64 (Exp -> Exp PLUS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 64 (Exp -> Exp PLUS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 159
   yacc.py:2563:
   yacc.py:2565:    (65) Exp -> Exp MINUS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    OR              reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    AND             reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    GREATER         reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    LESS            reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    PLUS            reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    MINUS           reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    COLON           reduce using rule 65 (Exp -> Exp MINUS Exp .)
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TIMES           [ reduce using rule 65 (Exp -> Exp MINUS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 65 (Exp -> Exp MINUS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 65 (Exp -> Exp MINUS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 65 (Exp -> Exp MINUS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 160
   yacc.py:2563:
   yacc.py:2565:    (66) Exp -> Exp TIMES Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    OR              reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    AND             reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    GREATER         reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    LESS            reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    PLUS            reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    MINUS           reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    TIMES           reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    DIV             reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    MOD             reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    COLON           reduce using rule 66 (Exp -> Exp TIMES Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 66 (Exp -> Exp TIMES Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 161
   yacc.py:2563:
   yacc.py:2565:    (67) Exp -> Exp DIV Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    OR              reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    AND             reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    GREATER         reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    LESS            reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    PLUS            reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    MINUS           reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    TIMES           reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    DIV             reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    MOD             reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    COLON           reduce using rule 67 (Exp -> Exp DIV Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 67 (Exp -> Exp DIV Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 162
   yacc.py:2563:
   yacc.py:2565:    (68) Exp -> Exp MOD Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    TERNARYIF       reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    OR              reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    AND             reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    BINARYOR        reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    BINARYAND       reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    LESSLESS        reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    EQUALS          reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    GREATER         reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    LESS            reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    PLUS            reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    MINUS           reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    TIMES           reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    DIV             reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    MOD             reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    COLON           reduce using rule 68 (Exp -> Exp MOD Exp .)
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! ARROW           [ reduce using rule 68 (Exp -> Exp MOD Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2696:  ! TERNARYIF       [ shift and go to state 97 ]
   yacc.py:2696:  ! OR              [ shift and go to state 98 ]
   yacc.py:2696:  ! AND             [ shift and go to state 99 ]
   yacc.py:2696:  ! BINARYOR        [ shift and go to state 100 ]
   yacc.py:2696:  ! BINARYAND       [ shift and go to state 101 ]
   yacc.py:2696:  ! LESSLESS        [ shift and go to state 102 ]
   yacc.py:2696:  ! GREATERGREATER  [ shift and go to state 103 ]
   yacc.py:2696:  ! EQUALS          [ shift and go to state 104 ]
   yacc.py:2696:  ! NOTEQUALS       [ shift and go to state 105 ]
   yacc.py:2696:  ! GREATEREQUALS   [ shift and go to state 106 ]
   yacc.py:2696:  ! LESSEQUALS      [ shift and go to state 107 ]
   yacc.py:2696:  ! GREATER         [ shift and go to state 108 ]
   yacc.py:2696:  ! LESS            [ shift and go to state 109 ]
   yacc.py:2696:  ! PLUS            [ shift and go to state 110 ]
   yacc.py:2696:  ! MINUS           [ shift and go to state 111 ]
   yacc.py:2696:  ! TIMES           [ shift and go to state 112 ]
   yacc.py:2696:  ! DIV             [ shift and go to state 113 ]
   yacc.py:2696:  ! MOD             [ shift and go to state 114 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 163
   yacc.py:2563:
   yacc.py:2565:    (79) Exp -> Exp ARROW ID . OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    OPENPARENT      shift and go to state 181
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 164
   yacc.py:2563:
   yacc.py:2565:    (46) Exp -> LeftVal ATRIB Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 46 (Exp -> LeftVal ATRIB Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 46 (Exp -> LeftVal ATRIB Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 46 (Exp -> LeftVal ATRIB Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 46 (Exp -> LeftVal ATRIB Exp .)
   yacc.py:2687:    COLON           reduce using rule 46 (Exp -> LeftVal ATRIB Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 46 (Exp -> LeftVal ATRIB Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 165
   yacc.py:2563:
   yacc.py:2565:    (47) Exp -> LeftVal PLUSEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 47 (Exp -> LeftVal PLUSEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 166
   yacc.py:2563:
   yacc.py:2565:    (48) Exp -> LeftVal MINUSEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 48 (Exp -> LeftVal MINUSEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 167
   yacc.py:2563:
   yacc.py:2565:    (49) Exp -> LeftVal TIMESEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 49 (Exp -> LeftVal TIMESEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 168
   yacc.py:2563:
   yacc.py:2565:    (50) Exp -> LeftVal DIVEQUALS Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .)
   yacc.py:2687:    COLON           reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 50 (Exp -> LeftVal DIVEQUALS Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 169
   yacc.py:2563:
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 182
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 170
   yacc.py:2563:
   yacc.py:2565:    (77) Exp -> NEW ID OPENPARENT . OptArgs CLOSEPARENT
   yacc.py:2565:    (85) OptArgs -> . Args
   yacc.py:2565:    (86) OptArgs -> . empty
   yacc.py:2565:    (87) Args -> . Args COMMA Exp
   yacc.py:2565:    (88) Args -> . Exp
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptArgs                        shift and go to state 183
   yacc.py:2714:    Args                           shift and go to state 139
   yacc.py:2714:    empty                          shift and go to state 140
   yacc.py:2714:    Exp                            shift and go to state 141
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 171
   yacc.py:2563:
   yacc.py:2565:    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    STATIC          reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    VAR             reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    DEF             reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 172
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT OptExp CLOSEPARENT . Command ELSE Command
   yacc.py:2565:    (33) Command -> IF OPENPARENT OptExp CLOSEPARENT . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Command                        shift and go to state 184
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 173
   yacc.py:2563:
   yacc.py:2565:    (34) Command -> WHILE OPENPARENT OptExp CLOSEPARENT . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Command                        shift and go to state 185
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 174
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command WHILE OPENPARENT . OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 186
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 175
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON . OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 187
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 176
   yacc.py:2563:
   yacc.py:2565:    (37) Command -> FOREACH ID IN ID . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Command                        shift and go to state 188
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 177
   yacc.py:2563:
   yacc.py:2565:    (78) Exp -> ID OPENPARENT OptArgs CLOSEPARENT .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TERNARYIF       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    OR              reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    AND             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYOR        reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYAND       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSLESS        reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    EQUALS          reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATER         reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESS            reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    PLUS            reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MINUS           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TIMES           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    DIV             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MOD             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    ARROW           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    COLON           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 178
   yacc.py:2563:
   yacc.py:2565:    (87) Args -> Args COMMA . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 189
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 179
   yacc.py:2563:
   yacc.py:2565:    (81) Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    TERNARYIF       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    OR              reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    AND             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    BINARYOR        reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    BINARYAND       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESSLESS        reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    EQUALS          reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATER         reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESS            reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    PLUS            reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MINUS           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    TIMES           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    DIV             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MOD             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    ARROW           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    SEMICOLON       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    COLON           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    ATRIB           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    PLUSEQUALS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MINUSEQUALS     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    TIMESEQUALS     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    DIVEQUALS       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 180
   yacc.py:2563:
   yacc.py:2565:    (51) Exp -> Exp TERNARYIF Exp COLON . Exp
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 190
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 181
   yacc.py:2563:
   yacc.py:2565:    (79) Exp -> Exp ARROW ID OPENPARENT . OptArgs CLOSEPARENT
   yacc.py:2565:    (85) OptArgs -> . Args
   yacc.py:2565:    (86) OptArgs -> . empty
   yacc.py:2565:    (87) Args -> . Args COMMA Exp
   yacc.py:2565:    (88) Args -> . Exp
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    Exp                            shift and go to state 141
   yacc.py:2714:    OptArgs                        shift and go to state 191
   yacc.py:2714:    Args                           shift and go to state 139
   yacc.py:2714:    empty                          shift and go to state 140
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 182
   yacc.py:2563:
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    CLOSESQUAREBRACKET shift and go to state 192
   yacc.py:2687:    COMMA           shift and go to state 96
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 183
   yacc.py:2563:
   yacc.py:2565:    (77) Exp -> NEW ID OPENPARENT OptArgs . CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 193
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 184
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT OptExp CLOSEPARENT Command . ELSE Command
   yacc.py:2565:    (33) Command -> IF OPENPARENT OptExp CLOSEPARENT Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    IF              reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    WHILE           reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    DO              reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOR             reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOREACH         reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    BREAK           reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    RETURN          reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NOT             reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    TILDE           reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUS           reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUS            reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NEW             reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ID              reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    STRING          reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NIL             reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FLOAT           reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    INT             reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ELSE            reduce using rule 33 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2689:
   yacc.py:2696:  ! ELSE            [ shift and go to state 194 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 185
   yacc.py:2563:
   yacc.py:2565:    (34) Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    IF              reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    WHILE           reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    DO              reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOR             reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOREACH         reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    BREAK           reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    RETURN          reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NOT             reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    TILDE           reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUS           reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUS            reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NEW             reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ID              reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    STRING          reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NIL             reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FLOAT           reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    INT             reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ELSE            reduce using rule 34 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 186
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command WHILE OPENPARENT OptExp . CLOSEPARENT SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 195
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 187
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp . SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 196
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 188
   yacc.py:2563:
   yacc.py:2565:    (37) Command -> FOREACH ID IN ID Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    IF              reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    WHILE           reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    DO              reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    FOR             reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    FOREACH         reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    BREAK           reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    RETURN          reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    NOT             reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    TILDE           reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    MINUS           reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    PLUS            reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    NEW             reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    ID              reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    STRING          reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    NIL             reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    FLOAT           reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    INT             reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2687:    ELSE            reduce using rule 37 (Command -> FOREACH ID IN ID Command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 189
   yacc.py:2563:
   yacc.py:2565:    (87) Args -> Args COMMA Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 87 (Args -> Args COMMA Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 87 (Args -> Args COMMA Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 190
   yacc.py:2563:
   yacc.py:2565:    (51) Exp -> Exp TERNARYIF Exp COLON Exp .
   yacc.py:2565:    (45) Exp -> Exp . COMMA Exp
   yacc.py:2565:    (51) Exp -> Exp . TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> Exp . OR Exp
   yacc.py:2565:    (53) Exp -> Exp . AND Exp
   yacc.py:2565:    (54) Exp -> Exp . BINARYOR Exp
   yacc.py:2565:    (55) Exp -> Exp . BINARYAND Exp
   yacc.py:2565:    (56) Exp -> Exp . LESSLESS Exp
   yacc.py:2565:    (57) Exp -> Exp . GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> Exp . EQUALS Exp
   yacc.py:2565:    (59) Exp -> Exp . NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> Exp . GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> Exp . LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> Exp . GREATER Exp
   yacc.py:2565:    (63) Exp -> Exp . LESS Exp
   yacc.py:2565:    (64) Exp -> Exp . PLUS Exp
   yacc.py:2565:    (65) Exp -> Exp . MINUS Exp
   yacc.py:2565:    (66) Exp -> Exp . TIMES Exp
   yacc.py:2565:    (67) Exp -> Exp . DIV Exp
   yacc.py:2565:    (68) Exp -> Exp . MOD Exp
   yacc.py:2565:    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .)
   yacc.py:2687:    SEMICOLON       reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .)
   yacc.py:2687:    COLON           reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .)
   yacc.py:2687:    TERNARYIF       shift and go to state 97
   yacc.py:2687:    OR              shift and go to state 98
   yacc.py:2687:    AND             shift and go to state 99
   yacc.py:2687:    BINARYOR        shift and go to state 100
   yacc.py:2687:    BINARYAND       shift and go to state 101
   yacc.py:2687:    LESSLESS        shift and go to state 102
   yacc.py:2687:    GREATERGREATER  shift and go to state 103
   yacc.py:2687:    EQUALS          shift and go to state 104
   yacc.py:2687:    NOTEQUALS       shift and go to state 105
   yacc.py:2687:    GREATEREQUALS   shift and go to state 106
   yacc.py:2687:    LESSEQUALS      shift and go to state 107
   yacc.py:2687:    GREATER         shift and go to state 108
   yacc.py:2687:    LESS            shift and go to state 109
   yacc.py:2687:    PLUS            shift and go to state 110
   yacc.py:2687:    MINUS           shift and go to state 111
   yacc.py:2687:    TIMES           shift and go to state 112
   yacc.py:2687:    DIV             shift and go to state 113
   yacc.py:2687:    MOD             shift and go to state 114
   yacc.py:2687:    ARROW           shift and go to state 115
   yacc.py:2689:
   yacc.py:2696:  ! TERNARYIF       [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! OR              [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! AND             [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! BINARYOR        [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! BINARYAND       [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! LESSLESS        [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! GREATERGREATER  [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! EQUALS          [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! NOTEQUALS       [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! GREATEREQUALS   [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! LESSEQUALS      [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! GREATER         [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! LESS            [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! PLUS            [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! MINUS           [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! TIMES           [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! DIV             [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! MOD             [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! ARROW           [ reduce using rule 51 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
   yacc.py:2696:  ! COMMA           [ shift and go to state 96 ]
   yacc.py:2700:
   yacc.py:2561:
   yacc.py:2562:state 191
   yacc.py:2563:
   yacc.py:2565:    (79) Exp -> Exp ARROW ID OPENPARENT OptArgs . CLOSEPARENT
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 197
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 192
   yacc.py:2563:
   yacc.py:2565:    (90) LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    TERNARYIF       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    OR              reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    AND             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    BINARYOR        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    BINARYAND       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESSLESS        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    EQUALS          reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    GREATER         reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    LESS            reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    PLUS            reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MINUS           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    TIMES           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    DIV             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    MOD             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    ARROW           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    SEMICOLON       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2687:    COLON           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 193
   yacc.py:2563:
   yacc.py:2565:    (77) Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TERNARYIF       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    OR              reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    AND             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYOR        reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYAND       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSLESS        reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    EQUALS          reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATER         reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESS            reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    PLUS            reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MINUS           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TIMES           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    DIV             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MOD             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    ARROW           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    COLON           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 194
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Command                        shift and go to state 198
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 195
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT . SEMICOLON
   yacc.py:2566:
   yacc.py:2687:    SEMICOLON       shift and go to state 199
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 196
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON . OptExp CLOSEPARENT Command
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    CLOSEPARENT     reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 200
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 197
   yacc.py:2563:
   yacc.py:2565:    (79) Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .
   yacc.py:2566:
   yacc.py:2687:    COMMA           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TERNARYIF       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    OR              reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    AND             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYOR        reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    BINARYAND       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSLESS        reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATERGREATER  reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    EQUALS          reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    NOTEQUALS       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATEREQUALS   reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESSEQUALS      reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    GREATER         reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    LESS            reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    PLUS            reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MINUS           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    TIMES           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    DIV             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    MOD             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    ARROW           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    SEMICOLON       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSEPARENT     reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    CLOSESQUAREBRACKET reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2687:    COLON           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 198
   yacc.py:2563:
   yacc.py:2565:    (32) Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    IF              reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    WHILE           reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    DO              reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    FOR             reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    FOREACH         reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    BREAK           reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    RETURN          reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    NOT             reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    TILDE           reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    MINUS           reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    PLUS            reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    NEW             reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    ID              reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    STRING          reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    NIL             reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    FLOAT           reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    INT             reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2687:    ELSE            reduce using rule 32 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 199
   yacc.py:2563:
   yacc.py:2565:    (35) Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    IF              reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    WHILE           reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    DO              reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    FOR             reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    FOREACH         reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    BREAK           reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    CONTINUE        reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    RETURN          reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    OPENBRACE       reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    NOT             reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    TILDE           reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    MINUS           reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    PLUS            reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    NEW             reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    ID              reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    STRING          reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    NIL             reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    FLOAT           reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    INT             reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    SEMICOLON       reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2687:    ELSE            reduce using rule 35 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 200
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp . CLOSEPARENT Command
   yacc.py:2566:
   yacc.py:2687:    CLOSEPARENT     shift and go to state 201
   yacc.py:2689:
   yacc.py:2561:
   yacc.py:2562:state 201
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT . Command
   yacc.py:2565:    (32) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
   yacc.py:2565:    (33) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (34) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
   yacc.py:2565:    (35) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
   yacc.py:2565:    (36) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
   yacc.py:2565:    (37) Command -> . FOREACH ID IN ID Command
   yacc.py:2565:    (38) Command -> . BREAK SEMICOLON
   yacc.py:2565:    (39) Command -> . CONTINUE SEMICOLON
   yacc.py:2565:    (40) Command -> . RETURN OptExp SEMICOLON
   yacc.py:2565:    (41) Command -> . OptExp SEMICOLON
   yacc.py:2565:    (42) Command -> . Block
   yacc.py:2565:    (43) OptExp -> . Exp
   yacc.py:2565:    (44) OptExp -> . empty
   yacc.py:2565:    (29) Block -> . OPENBRACE CommandList CLOSEBRACE
   yacc.py:2565:    (45) Exp -> . Exp COMMA Exp
   yacc.py:2565:    (46) Exp -> . LeftVal ATRIB Exp
   yacc.py:2565:    (47) Exp -> . LeftVal PLUSEQUALS Exp
   yacc.py:2565:    (48) Exp -> . LeftVal MINUSEQUALS Exp
   yacc.py:2565:    (49) Exp -> . LeftVal TIMESEQUALS Exp
   yacc.py:2565:    (50) Exp -> . LeftVal DIVEQUALS Exp
   yacc.py:2565:    (51) Exp -> . Exp TERNARYIF Exp COLON Exp
   yacc.py:2565:    (52) Exp -> . Exp OR Exp
   yacc.py:2565:    (53) Exp -> . Exp AND Exp
   yacc.py:2565:    (54) Exp -> . Exp BINARYOR Exp
   yacc.py:2565:    (55) Exp -> . Exp BINARYAND Exp
   yacc.py:2565:    (56) Exp -> . Exp LESSLESS Exp
   yacc.py:2565:    (57) Exp -> . Exp GREATERGREATER Exp
   yacc.py:2565:    (58) Exp -> . Exp EQUALS Exp
   yacc.py:2565:    (59) Exp -> . Exp NOTEQUALS Exp
   yacc.py:2565:    (60) Exp -> . Exp GREATEREQUALS Exp
   yacc.py:2565:    (61) Exp -> . Exp LESSEQUALS Exp
   yacc.py:2565:    (62) Exp -> . Exp GREATER Exp
   yacc.py:2565:    (63) Exp -> . Exp LESS Exp
   yacc.py:2565:    (64) Exp -> . Exp PLUS Exp
   yacc.py:2565:    (65) Exp -> . Exp MINUS Exp
   yacc.py:2565:    (66) Exp -> . Exp TIMES Exp
   yacc.py:2565:    (67) Exp -> . Exp DIV Exp
   yacc.py:2565:    (68) Exp -> . Exp MOD Exp
   yacc.py:2565:    (69) Exp -> . MINUSMINUS LeftVal
   yacc.py:2565:    (70) Exp -> . PLUSPLUS LeftVal
   yacc.py:2565:    (71) Exp -> . LeftVal MINUSMINUS
   yacc.py:2565:    (72) Exp -> . LeftVal PLUSPLUS
   yacc.py:2565:    (73) Exp -> . NOT Exp
   yacc.py:2565:    (74) Exp -> . TILDE Exp
   yacc.py:2565:    (75) Exp -> . MINUS Exp
   yacc.py:2565:    (76) Exp -> . PLUS Exp
   yacc.py:2565:    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
   yacc.py:2565:    (80) Exp -> . ID
   yacc.py:2565:    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (82) Exp -> . Number
   yacc.py:2565:    (83) Exp -> . STRING
   yacc.py:2565:    (84) Exp -> . NIL
   yacc.py:2565:    (93) empty -> .
   yacc.py:2565:    (89) LeftVal -> . ID
   yacc.py:2565:    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
   yacc.py:2565:    (91) Number -> . FLOAT
   yacc.py:2565:    (92) Number -> . INT
   yacc.py:2566:
   yacc.py:2687:    IF              shift and go to state 56
   yacc.py:2687:    WHILE           shift and go to state 58
   yacc.py:2687:    DO              shift and go to state 59
   yacc.py:2687:    FOR             shift and go to state 60
   yacc.py:2687:    FOREACH         shift and go to state 61
   yacc.py:2687:    BREAK           shift and go to state 63
   yacc.py:2687:    CONTINUE        shift and go to state 64
   yacc.py:2687:    RETURN          shift and go to state 65
   yacc.py:2687:    OPENBRACE       shift and go to state 41
   yacc.py:2687:    MINUSMINUS      shift and go to state 72
   yacc.py:2687:    PLUSPLUS        shift and go to state 73
   yacc.py:2687:    NOT             shift and go to state 74
   yacc.py:2687:    TILDE           shift and go to state 75
   yacc.py:2687:    MINUS           shift and go to state 71
   yacc.py:2687:    PLUS            shift and go to state 70
   yacc.py:2687:    NEW             shift and go to state 76
   yacc.py:2687:    ID              shift and go to state 62
   yacc.py:2687:    STRING          shift and go to state 78
   yacc.py:2687:    NIL             shift and go to state 79
   yacc.py:2687:    SEMICOLON       reduce using rule 93 (empty -> .)
   yacc.py:2687:    FLOAT           shift and go to state 80
   yacc.py:2687:    INT             shift and go to state 81
   yacc.py:2689:
   yacc.py:2714:    OptExp                         shift and go to state 57
   yacc.py:2714:    Command                        shift and go to state 202
   yacc.py:2714:    Block                          shift and go to state 66
   yacc.py:2714:    Exp                            shift and go to state 67
   yacc.py:2714:    empty                          shift and go to state 68
   yacc.py:2714:    LeftVal                        shift and go to state 69
   yacc.py:2714:    Number                         shift and go to state 77
   yacc.py:2561:
   yacc.py:2562:state 202
   yacc.py:2563:
   yacc.py:2565:    (36) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .
   yacc.py:2566:
   yacc.py:2687:    CLOSEBRACE      reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    IF              reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    WHILE           reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    DO              reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOR             reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FOREACH         reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    BREAK           reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    CONTINUE        reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    RETURN          reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    OPENBRACE       reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUSMINUS      reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUSPLUS        reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NOT             reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    TILDE           reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    MINUS           reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    PLUS            reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NEW             reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ID              reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    STRING          reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    NIL             reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    FLOAT           reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    INT             reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    SEMICOLON       reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2687:    ELSE            reduce using rule 36 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
   yacc.py:2689:
   yacc.py:3457:
   yacc.py:3458:Conflicts:
   yacc.py:3459:
   yacc.py:3462:shift/reduce conflict for ID in state 8 resolved as shift
   yacc.py:3462:shift/reduce conflict for COMMA in state 141 resolved as shift
