Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AMPERSANDLESS
    CIRCUMFLEX
    CIRCUMFLEXLESS
    ERROR
    NEWLINE
    PRINT

Grammar

Rule 0     S' -> Program
Rule 1     Program -> DefinitionList
Rule 2     DefinitionList -> DefinitionList Definition
Rule 3     DefinitionList -> empty
Rule 4     Definition -> ClassDefinition
Rule 5     Definition -> FunctionDefinition
Rule 6     ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE
Rule 7     FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block
Rule 8     OptClassBase -> COLON ID
Rule 9     OptClassBase -> empty
Rule 10    MemberList -> MemberList MemberDefinition
Rule 11    MemberList -> empty
Rule 12    MemberDefinition -> OptModifier VAR VariableList SEMICOLON
Rule 13    MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
Rule 14    OptModifier -> STATIC
Rule 15    OptModifier -> empty
Rule 16    VariableList -> VariableList COMMA Variable
Rule 17    VariableList -> Variable
Rule 18    Variable -> ID
Rule 19    Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET
Rule 20    OptFormArgsList -> FormArgsList
Rule 21    OptFormArgsList -> empty
Rule 22    OptArgsList -> OptArgsList COMMA ID
Rule 23    OptArgsList -> ID
Rule 24    OptEnvClass -> ID COLONCOLON
Rule 25    OptEnvClass -> empty
Rule 26    OptParamList -> OptFormArgsList OptTempList
Rule 27    OptTempList -> SEMICOLON FormArgsList
Rule 28    OptTempList -> empty
Rule 29    FormArgsList -> FormArgsList COMMA ID
Rule 30    FormArgsList -> ID
Rule 31    Block -> OPENBRACE CommandList CLOSEBRACE
Rule 32    CommandList -> CommandList Command
Rule 33    CommandList -> empty
Rule 34    Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
Rule 35    Command -> IF OPENPARENT OptExp CLOSEPARENT Command
Rule 36    Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command
Rule 37    Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
Rule 38    Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
Rule 39    Command -> FOREACH ID IN ID Command
Rule 40    Command -> BREAK SEMICOLON
Rule 41    Command -> CONTINUE SEMICOLON
Rule 42    Command -> RETURN OptExp SEMICOLON
Rule 43    Command -> OptExp SEMICOLON
Rule 44    Command -> Block
Rule 45    OptExp -> Exp
Rule 46    OptExp -> empty
Rule 47    Exp -> Exp COMMA Exp
Rule 48    Exp -> LeftVal ATRIB Exp
Rule 49    Exp -> LeftVal PLUSEQUALS Exp
Rule 50    Exp -> LeftVal MINUSEQUALS Exp
Rule 51    Exp -> LeftVal TIMESEQUALS Exp
Rule 52    Exp -> LeftVal DIVEQUALS Exp
Rule 53    Exp -> Exp TERNARYIF Exp COLON Exp
Rule 54    Exp -> Exp OR Exp
Rule 55    Exp -> Exp AND Exp
Rule 56    Exp -> Exp BINARYOR Exp
Rule 57    Exp -> Exp BINARYAND Exp
Rule 58    Exp -> Exp LESSLESS Exp
Rule 59    Exp -> Exp GREATERGREATER Exp
Rule 60    Exp -> Exp EQUALS Exp
Rule 61    Exp -> Exp NOTEQUALS Exp
Rule 62    Exp -> Exp GREATEREQUALS Exp
Rule 63    Exp -> Exp LESSEQUALS Exp
Rule 64    Exp -> Exp GREATER Exp
Rule 65    Exp -> Exp LESS Exp
Rule 66    Exp -> Exp PLUS Exp
Rule 67    Exp -> Exp MINUS Exp
Rule 68    Exp -> Exp TIMES Exp
Rule 69    Exp -> Exp DIV Exp
Rule 70    Exp -> Exp MOD Exp
Rule 71    Exp -> MINUSMINUS LeftVal
Rule 72    Exp -> PLUSPLUS LeftVal
Rule 73    Exp -> LeftVal MINUSMINUS
Rule 74    Exp -> LeftVal PLUSPLUS
Rule 75    Exp -> NOT Exp
Rule 76    Exp -> TILDE Exp
Rule 77    Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT
Rule 78    Exp -> ID OPENPARENT OptArgs CLOSEPARENT
Rule 79    Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
Rule 80    Exp -> ID
Rule 81    Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
Rule 82    Exp -> NUMBER
Rule 83    Exp -> STRING
Rule 84    Exp -> NIL
Rule 85    OptArgs -> Args
Rule 86    OptArgs -> empty
Rule 87    Args -> Args COMMA Exp
Rule 88    Args -> Exp
Rule 89    LeftVal -> ID
Rule 90    LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
Rule 91    empty -> <empty>

Terminals, with rules where they appear

AMPERSANDLESS        : 
AND                  : 55
ARROW                : 79
ATRIB                : 48
BINARYAND            : 57
BINARYOR             : 56
BREAK                : 40
CIRCUMFLEX           : 
CIRCUMFLEXLESS       : 
CLASS                : 6
CLOSEBRACE           : 6 31
CLOSEPARENT          : 7 13 34 35 36 37 38 77 78 79
CLOSESQUAREBRACKET   : 19 81 90
COLON                : 8 53
COLONCOLON           : 24
COMMA                : 16 22 29 47 87
CONTINUE             : 41
DEF                  : 7 13
DIV                  : 69
DIVEQUALS            : 52
DO                   : 37
ELSE                 : 34
EQUALS               : 60
ERROR                : 
FOR                  : 38
FOREACH              : 39
GREATER              : 64
GREATEREQUALS        : 62
GREATERGREATER       : 59
ID                   : 6 7 8 13 18 19 22 23 24 29 30 39 39 77 78 79 80 81 89 90
IF                   : 34 35
IN                   : 39
LESS                 : 65
LESSEQUALS           : 63
LESSLESS             : 58
MINUS                : 67
MINUSEQUALS          : 50
MINUSMINUS           : 71 73
MOD                  : 70
NEW                  : 77
NEWLINE              : 
NIL                  : 84
NOT                  : 75
NOTEQUALS            : 61
NUMBER               : 19 82
OPENBRACE            : 6 31
OPENPARENT           : 7 13 34 35 36 37 38 77 78 79
OPENSQUAREBRACKET    : 19 81 90
OR                   : 54
PLUS                 : 66
PLUSEQUALS           : 49
PLUSPLUS             : 72 74
PRINT                : 
RETURN               : 42
SEMICOLON            : 12 13 27 37 38 38 40 41 42 43
STATIC               : 14
STRING               : 83
TERNARYIF            : 53
TILDE                : 76
TIMES                : 68
TIMESEQUALS          : 51
VAR                  : 12
WHILE                : 36 37
error                : 

Nonterminals, with rules where they appear

Args                 : 85 87
Block                : 7 44
ClassDefinition      : 4
Command              : 32 34 34 35 36 37 38 39
CommandList          : 31 32
Definition           : 2
DefinitionList       : 1 2
Exp                  : 45 47 47 48 49 50 51 52 53 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 68 69 69 70 70 75 76 79 81 87 88 90
FormArgsList         : 20 27 29
FunctionDefinition   : 5
LeftVal              : 48 49 50 51 52 71 72 73 74
MemberDefinition     : 10
MemberList           : 6 10
OptArgs              : 77 78 79
OptArgsList          : 22
OptClassBase         : 6
OptEnvClass          : 7
OptExp               : 34 35 36 37 38 38 38 42 43
OptFormArgsList      : 13 26
OptModifier          : 12 13
OptParamList         : 7
OptTempList          : 26
Program              : 0
Variable             : 16 17
VariableList         : 12 16
empty                : 3 9 11 15 21 25 28 33 46 86

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . DefinitionList
    (2) DefinitionList -> . DefinitionList Definition
    (3) DefinitionList -> . empty
    (91) empty -> .

    CLASS           reduce using rule 91 (empty -> .)
    DEF             reduce using rule 91 (empty -> .)
    $end            reduce using rule 91 (empty -> .)

    Program                        shift and go to state 1
    DefinitionList                 shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> Program .



state 2

    (1) Program -> DefinitionList .
    (2) DefinitionList -> DefinitionList . Definition
    (4) Definition -> . ClassDefinition
    (5) Definition -> . FunctionDefinition
    (6) ClassDefinition -> . CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE
    (7) FunctionDefinition -> . DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block

    $end            reduce using rule 1 (Program -> DefinitionList .)
    CLASS           shift and go to state 7
    DEF             shift and go to state 8

    Definition                     shift and go to state 4
    ClassDefinition                shift and go to state 5
    FunctionDefinition             shift and go to state 6

state 3

    (3) DefinitionList -> empty .

    CLASS           reduce using rule 3 (DefinitionList -> empty .)
    DEF             reduce using rule 3 (DefinitionList -> empty .)
    $end            reduce using rule 3 (DefinitionList -> empty .)


state 4

    (2) DefinitionList -> DefinitionList Definition .

    CLASS           reduce using rule 2 (DefinitionList -> DefinitionList Definition .)
    DEF             reduce using rule 2 (DefinitionList -> DefinitionList Definition .)
    $end            reduce using rule 2 (DefinitionList -> DefinitionList Definition .)


state 5

    (4) Definition -> ClassDefinition .

    CLASS           reduce using rule 4 (Definition -> ClassDefinition .)
    DEF             reduce using rule 4 (Definition -> ClassDefinition .)
    $end            reduce using rule 4 (Definition -> ClassDefinition .)


state 6

    (5) Definition -> FunctionDefinition .

    CLASS           reduce using rule 5 (Definition -> FunctionDefinition .)
    DEF             reduce using rule 5 (Definition -> FunctionDefinition .)
    $end            reduce using rule 5 (Definition -> FunctionDefinition .)


state 7

    (6) ClassDefinition -> CLASS . ID OptClassBase OPENBRACE MemberList CLOSEBRACE

    ID              shift and go to state 9


state 8

    (7) FunctionDefinition -> DEF . OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block
    (24) OptEnvClass -> . ID COLONCOLON
    (25) OptEnvClass -> . empty
    (91) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 11

  ! ID              [ reduce using rule 91 (empty -> .) ]

    OptEnvClass                    shift and go to state 10
    empty                          shift and go to state 12

state 9

    (6) ClassDefinition -> CLASS ID . OptClassBase OPENBRACE MemberList CLOSEBRACE
    (8) OptClassBase -> . COLON ID
    (9) OptClassBase -> . empty
    (91) empty -> .

    COLON           shift and go to state 14
    OPENBRACE       reduce using rule 91 (empty -> .)

    OptClassBase                   shift and go to state 13
    empty                          shift and go to state 15

state 10

    (7) FunctionDefinition -> DEF OptEnvClass . ID OPENPARENT OptParamList CLOSEPARENT Block

    ID              shift and go to state 16


state 11

    (24) OptEnvClass -> ID . COLONCOLON

    COLONCOLON      shift and go to state 17


state 12

    (25) OptEnvClass -> empty .

    ID              reduce using rule 25 (OptEnvClass -> empty .)


state 13

    (6) ClassDefinition -> CLASS ID OptClassBase . OPENBRACE MemberList CLOSEBRACE

    OPENBRACE       shift and go to state 18


state 14

    (8) OptClassBase -> COLON . ID

    ID              shift and go to state 19


state 15

    (9) OptClassBase -> empty .

    OPENBRACE       reduce using rule 9 (OptClassBase -> empty .)


state 16

    (7) FunctionDefinition -> DEF OptEnvClass ID . OPENPARENT OptParamList CLOSEPARENT Block

    OPENPARENT      shift and go to state 20


state 17

    (24) OptEnvClass -> ID COLONCOLON .

    ID              reduce using rule 24 (OptEnvClass -> ID COLONCOLON .)


state 18

    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE . MemberList CLOSEBRACE
    (10) MemberList -> . MemberList MemberDefinition
    (11) MemberList -> . empty
    (91) empty -> .

    CLOSEBRACE      reduce using rule 91 (empty -> .)
    STATIC          reduce using rule 91 (empty -> .)
    VAR             reduce using rule 91 (empty -> .)
    DEF             reduce using rule 91 (empty -> .)

    MemberList                     shift and go to state 21
    empty                          shift and go to state 22

state 19

    (8) OptClassBase -> COLON ID .

    OPENBRACE       reduce using rule 8 (OptClassBase -> COLON ID .)


state 20

    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT . OptParamList CLOSEPARENT Block
    (26) OptParamList -> . OptFormArgsList OptTempList
    (20) OptFormArgsList -> . FormArgsList
    (21) OptFormArgsList -> . empty
    (29) FormArgsList -> . FormArgsList COMMA ID
    (30) FormArgsList -> . ID
    (91) empty -> .

    ID              shift and go to state 23
    SEMICOLON       reduce using rule 91 (empty -> .)
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptParamList                   shift and go to state 24
    OptFormArgsList                shift and go to state 25
    FormArgsList                   shift and go to state 26
    empty                          shift and go to state 27

state 21

    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList . CLOSEBRACE
    (10) MemberList -> MemberList . MemberDefinition
    (12) MemberDefinition -> . OptModifier VAR VariableList SEMICOLON
    (13) MemberDefinition -> . OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON
    (14) OptModifier -> . STATIC
    (15) OptModifier -> . empty
    (91) empty -> .

    CLOSEBRACE      shift and go to state 28
    STATIC          shift and go to state 31
    VAR             reduce using rule 91 (empty -> .)
    DEF             reduce using rule 91 (empty -> .)

    MemberDefinition               shift and go to state 29
    OptModifier                    shift and go to state 30
    empty                          shift and go to state 32

state 22

    (11) MemberList -> empty .

    CLOSEBRACE      reduce using rule 11 (MemberList -> empty .)
    STATIC          reduce using rule 11 (MemberList -> empty .)
    VAR             reduce using rule 11 (MemberList -> empty .)
    DEF             reduce using rule 11 (MemberList -> empty .)


state 23

    (30) FormArgsList -> ID .

    COMMA           reduce using rule 30 (FormArgsList -> ID .)
    SEMICOLON       reduce using rule 30 (FormArgsList -> ID .)
    CLOSEPARENT     reduce using rule 30 (FormArgsList -> ID .)


state 24

    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList . CLOSEPARENT Block

    CLOSEPARENT     shift and go to state 33


state 25

    (26) OptParamList -> OptFormArgsList . OptTempList
    (27) OptTempList -> . SEMICOLON FormArgsList
    (28) OptTempList -> . empty
    (91) empty -> .

    SEMICOLON       shift and go to state 35
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptTempList                    shift and go to state 34
    empty                          shift and go to state 36

state 26

    (20) OptFormArgsList -> FormArgsList .
    (29) FormArgsList -> FormArgsList . COMMA ID

    SEMICOLON       reduce using rule 20 (OptFormArgsList -> FormArgsList .)
    CLOSEPARENT     reduce using rule 20 (OptFormArgsList -> FormArgsList .)
    COMMA           shift and go to state 37


state 27

    (21) OptFormArgsList -> empty .

    SEMICOLON       reduce using rule 21 (OptFormArgsList -> empty .)
    CLOSEPARENT     reduce using rule 21 (OptFormArgsList -> empty .)


state 28

    (6) ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .

    CLASS           reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)
    DEF             reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)
    $end            reduce using rule 6 (ClassDefinition -> CLASS ID OptClassBase OPENBRACE MemberList CLOSEBRACE .)


state 29

    (10) MemberList -> MemberList MemberDefinition .

    CLOSEBRACE      reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
    STATIC          reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
    VAR             reduce using rule 10 (MemberList -> MemberList MemberDefinition .)
    DEF             reduce using rule 10 (MemberList -> MemberList MemberDefinition .)


state 30

    (12) MemberDefinition -> OptModifier . VAR VariableList SEMICOLON
    (13) MemberDefinition -> OptModifier . DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON

    VAR             shift and go to state 38
    DEF             shift and go to state 39


state 31

    (14) OptModifier -> STATIC .

    VAR             reduce using rule 14 (OptModifier -> STATIC .)
    DEF             reduce using rule 14 (OptModifier -> STATIC .)


state 32

    (15) OptModifier -> empty .

    VAR             reduce using rule 15 (OptModifier -> empty .)
    DEF             reduce using rule 15 (OptModifier -> empty .)


state 33

    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT . Block
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE

    OPENBRACE       shift and go to state 41

    Block                          shift and go to state 40

state 34

    (26) OptParamList -> OptFormArgsList OptTempList .

    CLOSEPARENT     reduce using rule 26 (OptParamList -> OptFormArgsList OptTempList .)


state 35

    (27) OptTempList -> SEMICOLON . FormArgsList
    (29) FormArgsList -> . FormArgsList COMMA ID
    (30) FormArgsList -> . ID

    ID              shift and go to state 23

    FormArgsList                   shift and go to state 42

state 36

    (28) OptTempList -> empty .

    CLOSEPARENT     reduce using rule 28 (OptTempList -> empty .)


state 37

    (29) FormArgsList -> FormArgsList COMMA . ID

    ID              shift and go to state 43


state 38

    (12) MemberDefinition -> OptModifier VAR . VariableList SEMICOLON
    (16) VariableList -> . VariableList COMMA Variable
    (17) VariableList -> . Variable
    (18) Variable -> . ID
    (19) Variable -> . ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET

    ID              shift and go to state 46

    VariableList                   shift and go to state 44
    Variable                       shift and go to state 45

state 39

    (13) MemberDefinition -> OptModifier DEF . ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON

    ID              shift and go to state 47


state 40

    (7) FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .

    CLASS           reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)
    DEF             reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)
    $end            reduce using rule 7 (FunctionDefinition -> DEF OptEnvClass ID OPENPARENT OptParamList CLOSEPARENT Block .)


state 41

    (31) Block -> OPENBRACE . CommandList CLOSEBRACE
    (32) CommandList -> . CommandList Command
    (33) CommandList -> . empty
    (91) empty -> .

    CLOSEBRACE      reduce using rule 91 (empty -> .)
    IF              reduce using rule 91 (empty -> .)
    WHILE           reduce using rule 91 (empty -> .)
    DO              reduce using rule 91 (empty -> .)
    FOR             reduce using rule 91 (empty -> .)
    FOREACH         reduce using rule 91 (empty -> .)
    BREAK           reduce using rule 91 (empty -> .)
    CONTINUE        reduce using rule 91 (empty -> .)
    RETURN          reduce using rule 91 (empty -> .)
    OPENBRACE       reduce using rule 91 (empty -> .)
    MINUSMINUS      reduce using rule 91 (empty -> .)
    PLUSPLUS        reduce using rule 91 (empty -> .)
    NOT             reduce using rule 91 (empty -> .)
    TILDE           reduce using rule 91 (empty -> .)
    NEW             reduce using rule 91 (empty -> .)
    ID              reduce using rule 91 (empty -> .)
    NUMBER          reduce using rule 91 (empty -> .)
    STRING          reduce using rule 91 (empty -> .)
    NIL             reduce using rule 91 (empty -> .)
    SEMICOLON       reduce using rule 91 (empty -> .)

    CommandList                    shift and go to state 48
    empty                          shift and go to state 49

state 42

    (27) OptTempList -> SEMICOLON FormArgsList .
    (29) FormArgsList -> FormArgsList . COMMA ID

    CLOSEPARENT     reduce using rule 27 (OptTempList -> SEMICOLON FormArgsList .)
    COMMA           shift and go to state 37


state 43

    (29) FormArgsList -> FormArgsList COMMA ID .

    COMMA           reduce using rule 29 (FormArgsList -> FormArgsList COMMA ID .)
    SEMICOLON       reduce using rule 29 (FormArgsList -> FormArgsList COMMA ID .)
    CLOSEPARENT     reduce using rule 29 (FormArgsList -> FormArgsList COMMA ID .)


state 44

    (12) MemberDefinition -> OptModifier VAR VariableList . SEMICOLON
    (16) VariableList -> VariableList . COMMA Variable

    SEMICOLON       shift and go to state 50
    COMMA           shift and go to state 51


state 45

    (17) VariableList -> Variable .

    SEMICOLON       reduce using rule 17 (VariableList -> Variable .)
    COMMA           reduce using rule 17 (VariableList -> Variable .)


state 46

    (18) Variable -> ID .
    (19) Variable -> ID . OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET

    SEMICOLON       reduce using rule 18 (Variable -> ID .)
    COMMA           reduce using rule 18 (Variable -> ID .)
    OPENSQUAREBRACKET shift and go to state 52


state 47

    (13) MemberDefinition -> OptModifier DEF ID . OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON

    OPENPARENT      shift and go to state 53


state 48

    (31) Block -> OPENBRACE CommandList . CLOSEBRACE
    (32) CommandList -> CommandList . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    CLOSEBRACE      shift and go to state 54
    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    Command                        shift and go to state 55
    OptExp                         shift and go to state 57
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 49

    (33) CommandList -> empty .

    CLOSEBRACE      reduce using rule 33 (CommandList -> empty .)
    IF              reduce using rule 33 (CommandList -> empty .)
    WHILE           reduce using rule 33 (CommandList -> empty .)
    DO              reduce using rule 33 (CommandList -> empty .)
    FOR             reduce using rule 33 (CommandList -> empty .)
    FOREACH         reduce using rule 33 (CommandList -> empty .)
    BREAK           reduce using rule 33 (CommandList -> empty .)
    CONTINUE        reduce using rule 33 (CommandList -> empty .)
    RETURN          reduce using rule 33 (CommandList -> empty .)
    OPENBRACE       reduce using rule 33 (CommandList -> empty .)
    MINUSMINUS      reduce using rule 33 (CommandList -> empty .)
    PLUSPLUS        reduce using rule 33 (CommandList -> empty .)
    NOT             reduce using rule 33 (CommandList -> empty .)
    TILDE           reduce using rule 33 (CommandList -> empty .)
    NEW             reduce using rule 33 (CommandList -> empty .)
    ID              reduce using rule 33 (CommandList -> empty .)
    NUMBER          reduce using rule 33 (CommandList -> empty .)
    STRING          reduce using rule 33 (CommandList -> empty .)
    NIL             reduce using rule 33 (CommandList -> empty .)
    SEMICOLON       reduce using rule 33 (CommandList -> empty .)


state 50

    (12) MemberDefinition -> OptModifier VAR VariableList SEMICOLON .

    CLOSEBRACE      reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
    STATIC          reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
    VAR             reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)
    DEF             reduce using rule 12 (MemberDefinition -> OptModifier VAR VariableList SEMICOLON .)


state 51

    (16) VariableList -> VariableList COMMA . Variable
    (18) Variable -> . ID
    (19) Variable -> . ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET

    ID              shift and go to state 46

    Variable                       shift and go to state 78

state 52

    (19) Variable -> ID OPENSQUAREBRACKET . NUMBER CLOSESQUAREBRACKET

    NUMBER          shift and go to state 79


state 53

    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT . OptFormArgsList CLOSEPARENT SEMICOLON
    (20) OptFormArgsList -> . FormArgsList
    (21) OptFormArgsList -> . empty
    (29) FormArgsList -> . FormArgsList COMMA ID
    (30) FormArgsList -> . ID
    (91) empty -> .

    ID              shift and go to state 23
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptFormArgsList                shift and go to state 80
    FormArgsList                   shift and go to state 26
    empty                          shift and go to state 27

state 54

    (31) Block -> OPENBRACE CommandList CLOSEBRACE .

    CLASS           reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    DEF             reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    $end            reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    CLOSEBRACE      reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    IF              reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    WHILE           reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    DO              reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    FOR             reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    FOREACH         reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    BREAK           reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    CONTINUE        reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    RETURN          reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    OPENBRACE       reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    MINUSMINUS      reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    PLUSPLUS        reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    NOT             reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    TILDE           reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    NEW             reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    ID              reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    NUMBER          reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    STRING          reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    NIL             reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    SEMICOLON       reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)
    ELSE            reduce using rule 31 (Block -> OPENBRACE CommandList CLOSEBRACE .)


state 55

    (32) CommandList -> CommandList Command .

    CLOSEBRACE      reduce using rule 32 (CommandList -> CommandList Command .)
    IF              reduce using rule 32 (CommandList -> CommandList Command .)
    WHILE           reduce using rule 32 (CommandList -> CommandList Command .)
    DO              reduce using rule 32 (CommandList -> CommandList Command .)
    FOR             reduce using rule 32 (CommandList -> CommandList Command .)
    FOREACH         reduce using rule 32 (CommandList -> CommandList Command .)
    BREAK           reduce using rule 32 (CommandList -> CommandList Command .)
    CONTINUE        reduce using rule 32 (CommandList -> CommandList Command .)
    RETURN          reduce using rule 32 (CommandList -> CommandList Command .)
    OPENBRACE       reduce using rule 32 (CommandList -> CommandList Command .)
    MINUSMINUS      reduce using rule 32 (CommandList -> CommandList Command .)
    PLUSPLUS        reduce using rule 32 (CommandList -> CommandList Command .)
    NOT             reduce using rule 32 (CommandList -> CommandList Command .)
    TILDE           reduce using rule 32 (CommandList -> CommandList Command .)
    NEW             reduce using rule 32 (CommandList -> CommandList Command .)
    ID              reduce using rule 32 (CommandList -> CommandList Command .)
    NUMBER          reduce using rule 32 (CommandList -> CommandList Command .)
    STRING          reduce using rule 32 (CommandList -> CommandList Command .)
    NIL             reduce using rule 32 (CommandList -> CommandList Command .)
    SEMICOLON       reduce using rule 32 (CommandList -> CommandList Command .)


state 56

    (34) Command -> IF . OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> IF . OPENPARENT OptExp CLOSEPARENT Command

    OPENPARENT      shift and go to state 81


state 57

    (43) Command -> OptExp . SEMICOLON

    SEMICOLON       shift and go to state 82


state 58

    (36) Command -> WHILE . OPENPARENT OptExp CLOSEPARENT Command

    OPENPARENT      shift and go to state 83


state 59

    (37) Command -> DO . Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    Command                        shift and go to state 84
    OptExp                         shift and go to state 57
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 60

    (38) Command -> FOR . OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command

    OPENPARENT      shift and go to state 85


state 61

    (39) Command -> FOREACH . ID IN ID Command

    ID              shift and go to state 86


state 62

    (78) Exp -> ID . OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> ID .
    (81) Exp -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (89) LeftVal -> ID .
    (90) LeftVal -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    OPENPARENT      shift and go to state 87
    COMMA           reduce using rule 80 (Exp -> ID .)
    TERNARYIF       reduce using rule 80 (Exp -> ID .)
    OR              reduce using rule 80 (Exp -> ID .)
    AND             reduce using rule 80 (Exp -> ID .)
    BINARYOR        reduce using rule 80 (Exp -> ID .)
    BINARYAND       reduce using rule 80 (Exp -> ID .)
    LESSLESS        reduce using rule 80 (Exp -> ID .)
    GREATERGREATER  reduce using rule 80 (Exp -> ID .)
    EQUALS          reduce using rule 80 (Exp -> ID .)
    NOTEQUALS       reduce using rule 80 (Exp -> ID .)
    GREATEREQUALS   reduce using rule 80 (Exp -> ID .)
    LESSEQUALS      reduce using rule 80 (Exp -> ID .)
    GREATER         reduce using rule 80 (Exp -> ID .)
    LESS            reduce using rule 80 (Exp -> ID .)
    PLUS            reduce using rule 80 (Exp -> ID .)
    MINUS           reduce using rule 80 (Exp -> ID .)
    TIMES           reduce using rule 80 (Exp -> ID .)
    DIV             reduce using rule 80 (Exp -> ID .)
    MOD             reduce using rule 80 (Exp -> ID .)
    ARROW           reduce using rule 80 (Exp -> ID .)
    SEMICOLON       reduce using rule 80 (Exp -> ID .)
    CLOSEPARENT     reduce using rule 80 (Exp -> ID .)
    CLOSESQUAREBRACKET reduce using rule 80 (Exp -> ID .)
    COLON           reduce using rule 80 (Exp -> ID .)
    OPENSQUAREBRACKET shift and go to state 88
    ATRIB           reduce using rule 89 (LeftVal -> ID .)
    PLUSEQUALS      reduce using rule 89 (LeftVal -> ID .)
    MINUSEQUALS     reduce using rule 89 (LeftVal -> ID .)
    TIMESEQUALS     reduce using rule 89 (LeftVal -> ID .)
    DIVEQUALS       reduce using rule 89 (LeftVal -> ID .)
    MINUSMINUS      reduce using rule 89 (LeftVal -> ID .)
    PLUSPLUS        reduce using rule 89 (LeftVal -> ID .)


state 63

    (40) Command -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 89


state 64

    (41) Command -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 90


state 65

    (42) Command -> RETURN . OptExp SEMICOLON
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 91
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 66

    (44) Command -> Block .

    CLOSEBRACE      reduce using rule 44 (Command -> Block .)
    IF              reduce using rule 44 (Command -> Block .)
    WHILE           reduce using rule 44 (Command -> Block .)
    DO              reduce using rule 44 (Command -> Block .)
    FOR             reduce using rule 44 (Command -> Block .)
    FOREACH         reduce using rule 44 (Command -> Block .)
    BREAK           reduce using rule 44 (Command -> Block .)
    CONTINUE        reduce using rule 44 (Command -> Block .)
    RETURN          reduce using rule 44 (Command -> Block .)
    OPENBRACE       reduce using rule 44 (Command -> Block .)
    MINUSMINUS      reduce using rule 44 (Command -> Block .)
    PLUSPLUS        reduce using rule 44 (Command -> Block .)
    NOT             reduce using rule 44 (Command -> Block .)
    TILDE           reduce using rule 44 (Command -> Block .)
    NEW             reduce using rule 44 (Command -> Block .)
    ID              reduce using rule 44 (Command -> Block .)
    NUMBER          reduce using rule 44 (Command -> Block .)
    STRING          reduce using rule 44 (Command -> Block .)
    NIL             reduce using rule 44 (Command -> Block .)
    SEMICOLON       reduce using rule 44 (Command -> Block .)
    ELSE            reduce using rule 44 (Command -> Block .)


state 67

    (45) OptExp -> Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    SEMICOLON       reduce using rule 45 (OptExp -> Exp .)
    CLOSEPARENT     reduce using rule 45 (OptExp -> Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111


state 68

    (46) OptExp -> empty .

    SEMICOLON       reduce using rule 46 (OptExp -> empty .)
    CLOSEPARENT     reduce using rule 46 (OptExp -> empty .)


state 69

    (48) Exp -> LeftVal . ATRIB Exp
    (49) Exp -> LeftVal . PLUSEQUALS Exp
    (50) Exp -> LeftVal . MINUSEQUALS Exp
    (51) Exp -> LeftVal . TIMESEQUALS Exp
    (52) Exp -> LeftVal . DIVEQUALS Exp
    (73) Exp -> LeftVal . MINUSMINUS
    (74) Exp -> LeftVal . PLUSPLUS

    ATRIB           shift and go to state 112
    PLUSEQUALS      shift and go to state 113
    MINUSEQUALS     shift and go to state 114
    TIMESEQUALS     shift and go to state 115
    DIVEQUALS       shift and go to state 116
    MINUSMINUS      shift and go to state 117
    PLUSPLUS        shift and go to state 118


state 70

    (71) Exp -> MINUSMINUS . LeftVal
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    ID              shift and go to state 120

    LeftVal                        shift and go to state 119

state 71

    (72) Exp -> PLUSPLUS . LeftVal
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    ID              shift and go to state 120

    LeftVal                        shift and go to state 121

state 72

    (75) Exp -> NOT . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 122
    LeftVal                        shift and go to state 69

state 73

    (76) Exp -> TILDE . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 123
    LeftVal                        shift and go to state 69

state 74

    (77) Exp -> NEW . ID OPENPARENT OptArgs CLOSEPARENT

    ID              shift and go to state 124


state 75

    (82) Exp -> NUMBER .

    COMMA           reduce using rule 82 (Exp -> NUMBER .)
    TERNARYIF       reduce using rule 82 (Exp -> NUMBER .)
    OR              reduce using rule 82 (Exp -> NUMBER .)
    AND             reduce using rule 82 (Exp -> NUMBER .)
    BINARYOR        reduce using rule 82 (Exp -> NUMBER .)
    BINARYAND       reduce using rule 82 (Exp -> NUMBER .)
    LESSLESS        reduce using rule 82 (Exp -> NUMBER .)
    GREATERGREATER  reduce using rule 82 (Exp -> NUMBER .)
    EQUALS          reduce using rule 82 (Exp -> NUMBER .)
    NOTEQUALS       reduce using rule 82 (Exp -> NUMBER .)
    GREATEREQUALS   reduce using rule 82 (Exp -> NUMBER .)
    LESSEQUALS      reduce using rule 82 (Exp -> NUMBER .)
    GREATER         reduce using rule 82 (Exp -> NUMBER .)
    LESS            reduce using rule 82 (Exp -> NUMBER .)
    PLUS            reduce using rule 82 (Exp -> NUMBER .)
    MINUS           reduce using rule 82 (Exp -> NUMBER .)
    TIMES           reduce using rule 82 (Exp -> NUMBER .)
    DIV             reduce using rule 82 (Exp -> NUMBER .)
    MOD             reduce using rule 82 (Exp -> NUMBER .)
    ARROW           reduce using rule 82 (Exp -> NUMBER .)
    SEMICOLON       reduce using rule 82 (Exp -> NUMBER .)
    CLOSEPARENT     reduce using rule 82 (Exp -> NUMBER .)
    CLOSESQUAREBRACKET reduce using rule 82 (Exp -> NUMBER .)
    COLON           reduce using rule 82 (Exp -> NUMBER .)


state 76

    (83) Exp -> STRING .

    COMMA           reduce using rule 83 (Exp -> STRING .)
    TERNARYIF       reduce using rule 83 (Exp -> STRING .)
    OR              reduce using rule 83 (Exp -> STRING .)
    AND             reduce using rule 83 (Exp -> STRING .)
    BINARYOR        reduce using rule 83 (Exp -> STRING .)
    BINARYAND       reduce using rule 83 (Exp -> STRING .)
    LESSLESS        reduce using rule 83 (Exp -> STRING .)
    GREATERGREATER  reduce using rule 83 (Exp -> STRING .)
    EQUALS          reduce using rule 83 (Exp -> STRING .)
    NOTEQUALS       reduce using rule 83 (Exp -> STRING .)
    GREATEREQUALS   reduce using rule 83 (Exp -> STRING .)
    LESSEQUALS      reduce using rule 83 (Exp -> STRING .)
    GREATER         reduce using rule 83 (Exp -> STRING .)
    LESS            reduce using rule 83 (Exp -> STRING .)
    PLUS            reduce using rule 83 (Exp -> STRING .)
    MINUS           reduce using rule 83 (Exp -> STRING .)
    TIMES           reduce using rule 83 (Exp -> STRING .)
    DIV             reduce using rule 83 (Exp -> STRING .)
    MOD             reduce using rule 83 (Exp -> STRING .)
    ARROW           reduce using rule 83 (Exp -> STRING .)
    SEMICOLON       reduce using rule 83 (Exp -> STRING .)
    CLOSEPARENT     reduce using rule 83 (Exp -> STRING .)
    CLOSESQUAREBRACKET reduce using rule 83 (Exp -> STRING .)
    COLON           reduce using rule 83 (Exp -> STRING .)


state 77

    (84) Exp -> NIL .

    COMMA           reduce using rule 84 (Exp -> NIL .)
    TERNARYIF       reduce using rule 84 (Exp -> NIL .)
    OR              reduce using rule 84 (Exp -> NIL .)
    AND             reduce using rule 84 (Exp -> NIL .)
    BINARYOR        reduce using rule 84 (Exp -> NIL .)
    BINARYAND       reduce using rule 84 (Exp -> NIL .)
    LESSLESS        reduce using rule 84 (Exp -> NIL .)
    GREATERGREATER  reduce using rule 84 (Exp -> NIL .)
    EQUALS          reduce using rule 84 (Exp -> NIL .)
    NOTEQUALS       reduce using rule 84 (Exp -> NIL .)
    GREATEREQUALS   reduce using rule 84 (Exp -> NIL .)
    LESSEQUALS      reduce using rule 84 (Exp -> NIL .)
    GREATER         reduce using rule 84 (Exp -> NIL .)
    LESS            reduce using rule 84 (Exp -> NIL .)
    PLUS            reduce using rule 84 (Exp -> NIL .)
    MINUS           reduce using rule 84 (Exp -> NIL .)
    TIMES           reduce using rule 84 (Exp -> NIL .)
    DIV             reduce using rule 84 (Exp -> NIL .)
    MOD             reduce using rule 84 (Exp -> NIL .)
    ARROW           reduce using rule 84 (Exp -> NIL .)
    SEMICOLON       reduce using rule 84 (Exp -> NIL .)
    CLOSEPARENT     reduce using rule 84 (Exp -> NIL .)
    CLOSESQUAREBRACKET reduce using rule 84 (Exp -> NIL .)
    COLON           reduce using rule 84 (Exp -> NIL .)


state 78

    (16) VariableList -> VariableList COMMA Variable .

    SEMICOLON       reduce using rule 16 (VariableList -> VariableList COMMA Variable .)
    COMMA           reduce using rule 16 (VariableList -> VariableList COMMA Variable .)


state 79

    (19) Variable -> ID OPENSQUAREBRACKET NUMBER . CLOSESQUAREBRACKET

    CLOSESQUAREBRACKET shift and go to state 125


state 80

    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList . CLOSEPARENT SEMICOLON

    CLOSEPARENT     shift and go to state 126


state 81

    (34) Command -> IF OPENPARENT . OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> IF OPENPARENT . OptExp CLOSEPARENT Command
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 127
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 82

    (43) Command -> OptExp SEMICOLON .

    CLOSEBRACE      reduce using rule 43 (Command -> OptExp SEMICOLON .)
    IF              reduce using rule 43 (Command -> OptExp SEMICOLON .)
    WHILE           reduce using rule 43 (Command -> OptExp SEMICOLON .)
    DO              reduce using rule 43 (Command -> OptExp SEMICOLON .)
    FOR             reduce using rule 43 (Command -> OptExp SEMICOLON .)
    FOREACH         reduce using rule 43 (Command -> OptExp SEMICOLON .)
    BREAK           reduce using rule 43 (Command -> OptExp SEMICOLON .)
    CONTINUE        reduce using rule 43 (Command -> OptExp SEMICOLON .)
    RETURN          reduce using rule 43 (Command -> OptExp SEMICOLON .)
    OPENBRACE       reduce using rule 43 (Command -> OptExp SEMICOLON .)
    MINUSMINUS      reduce using rule 43 (Command -> OptExp SEMICOLON .)
    PLUSPLUS        reduce using rule 43 (Command -> OptExp SEMICOLON .)
    NOT             reduce using rule 43 (Command -> OptExp SEMICOLON .)
    TILDE           reduce using rule 43 (Command -> OptExp SEMICOLON .)
    NEW             reduce using rule 43 (Command -> OptExp SEMICOLON .)
    ID              reduce using rule 43 (Command -> OptExp SEMICOLON .)
    NUMBER          reduce using rule 43 (Command -> OptExp SEMICOLON .)
    STRING          reduce using rule 43 (Command -> OptExp SEMICOLON .)
    NIL             reduce using rule 43 (Command -> OptExp SEMICOLON .)
    SEMICOLON       reduce using rule 43 (Command -> OptExp SEMICOLON .)
    ELSE            reduce using rule 43 (Command -> OptExp SEMICOLON .)


state 83

    (36) Command -> WHILE OPENPARENT . OptExp CLOSEPARENT Command
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 128
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 84

    (37) Command -> DO Command . WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON

    WHILE           shift and go to state 129


state 85

    (38) Command -> FOR OPENPARENT . OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 130
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 86

    (39) Command -> FOREACH ID . IN ID Command

    IN              shift and go to state 131


state 87

    (78) Exp -> ID OPENPARENT . OptArgs CLOSEPARENT
    (85) OptArgs -> . Args
    (86) OptArgs -> . empty
    (87) Args -> . Args COMMA Exp
    (88) Args -> . Exp
    (91) empty -> .
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    CLOSEPARENT     reduce using rule 91 (empty -> .)
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    OptArgs                        shift and go to state 132
    Args                           shift and go to state 133
    empty                          shift and go to state 134
    Exp                            shift and go to state 135
    LeftVal                        shift and go to state 69

state 88

    (81) Exp -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
    (90) LeftVal -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 136
    LeftVal                        shift and go to state 69

state 89

    (40) Command -> BREAK SEMICOLON .

    CLOSEBRACE      reduce using rule 40 (Command -> BREAK SEMICOLON .)
    IF              reduce using rule 40 (Command -> BREAK SEMICOLON .)
    WHILE           reduce using rule 40 (Command -> BREAK SEMICOLON .)
    DO              reduce using rule 40 (Command -> BREAK SEMICOLON .)
    FOR             reduce using rule 40 (Command -> BREAK SEMICOLON .)
    FOREACH         reduce using rule 40 (Command -> BREAK SEMICOLON .)
    BREAK           reduce using rule 40 (Command -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 40 (Command -> BREAK SEMICOLON .)
    RETURN          reduce using rule 40 (Command -> BREAK SEMICOLON .)
    OPENBRACE       reduce using rule 40 (Command -> BREAK SEMICOLON .)
    MINUSMINUS      reduce using rule 40 (Command -> BREAK SEMICOLON .)
    PLUSPLUS        reduce using rule 40 (Command -> BREAK SEMICOLON .)
    NOT             reduce using rule 40 (Command -> BREAK SEMICOLON .)
    TILDE           reduce using rule 40 (Command -> BREAK SEMICOLON .)
    NEW             reduce using rule 40 (Command -> BREAK SEMICOLON .)
    ID              reduce using rule 40 (Command -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 40 (Command -> BREAK SEMICOLON .)
    STRING          reduce using rule 40 (Command -> BREAK SEMICOLON .)
    NIL             reduce using rule 40 (Command -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 40 (Command -> BREAK SEMICOLON .)
    ELSE            reduce using rule 40 (Command -> BREAK SEMICOLON .)


state 90

    (41) Command -> CONTINUE SEMICOLON .

    CLOSEBRACE      reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    IF              reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    DO              reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    FOREACH         reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    OPENBRACE       reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    MINUSMINUS      reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    PLUSPLUS        reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    TILDE           reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    ID              reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    NUMBER          reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    NIL             reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 41 (Command -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 41 (Command -> CONTINUE SEMICOLON .)


state 91

    (42) Command -> RETURN OptExp . SEMICOLON

    SEMICOLON       shift and go to state 137


state 92

    (47) Exp -> Exp COMMA . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 138
    LeftVal                        shift and go to state 69

state 93

    (53) Exp -> Exp TERNARYIF . Exp COLON Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 139
    LeftVal                        shift and go to state 69

state 94

    (54) Exp -> Exp OR . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 140
    LeftVal                        shift and go to state 69

state 95

    (55) Exp -> Exp AND . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 141
    LeftVal                        shift and go to state 69

state 96

    (56) Exp -> Exp BINARYOR . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 142
    LeftVal                        shift and go to state 69

state 97

    (57) Exp -> Exp BINARYAND . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 143
    LeftVal                        shift and go to state 69

state 98

    (58) Exp -> Exp LESSLESS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 144
    LeftVal                        shift and go to state 69

state 99

    (59) Exp -> Exp GREATERGREATER . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 145
    LeftVal                        shift and go to state 69

state 100

    (60) Exp -> Exp EQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 146
    LeftVal                        shift and go to state 69

state 101

    (61) Exp -> Exp NOTEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 147
    LeftVal                        shift and go to state 69

state 102

    (62) Exp -> Exp GREATEREQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 148
    LeftVal                        shift and go to state 69

state 103

    (63) Exp -> Exp LESSEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 149
    LeftVal                        shift and go to state 69

state 104

    (64) Exp -> Exp GREATER . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 150
    LeftVal                        shift and go to state 69

state 105

    (65) Exp -> Exp LESS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 151
    LeftVal                        shift and go to state 69

state 106

    (66) Exp -> Exp PLUS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 152
    LeftVal                        shift and go to state 69

state 107

    (67) Exp -> Exp MINUS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 153
    LeftVal                        shift and go to state 69

state 108

    (68) Exp -> Exp TIMES . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 154
    LeftVal                        shift and go to state 69

state 109

    (69) Exp -> Exp DIV . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 155
    LeftVal                        shift and go to state 69

state 110

    (70) Exp -> Exp MOD . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 156
    LeftVal                        shift and go to state 69

state 111

    (79) Exp -> Exp ARROW . ID OPENPARENT OptArgs CLOSEPARENT

    ID              shift and go to state 157


state 112

    (48) Exp -> LeftVal ATRIB . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    LeftVal                        shift and go to state 69
    Exp                            shift and go to state 158

state 113

    (49) Exp -> LeftVal PLUSEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    LeftVal                        shift and go to state 69
    Exp                            shift and go to state 159

state 114

    (50) Exp -> LeftVal MINUSEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    LeftVal                        shift and go to state 69
    Exp                            shift and go to state 160

state 115

    (51) Exp -> LeftVal TIMESEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    LeftVal                        shift and go to state 69
    Exp                            shift and go to state 161

state 116

    (52) Exp -> LeftVal DIVEQUALS . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    LeftVal                        shift and go to state 69
    Exp                            shift and go to state 162

state 117

    (73) Exp -> LeftVal MINUSMINUS .

    COMMA           reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    TERNARYIF       reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    OR              reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    AND             reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    BINARYOR        reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    BINARYAND       reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    LESSLESS        reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    GREATERGREATER  reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    EQUALS          reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    NOTEQUALS       reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    GREATEREQUALS   reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    LESSEQUALS      reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    GREATER         reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    LESS            reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    PLUS            reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    MINUS           reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    TIMES           reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    DIV             reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    MOD             reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    ARROW           reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    SEMICOLON       reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    CLOSEPARENT     reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    CLOSESQUAREBRACKET reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)
    COLON           reduce using rule 73 (Exp -> LeftVal MINUSMINUS .)


state 118

    (74) Exp -> LeftVal PLUSPLUS .

    COMMA           reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    TERNARYIF       reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    OR              reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    AND             reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    BINARYOR        reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    BINARYAND       reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    LESSLESS        reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    GREATERGREATER  reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    EQUALS          reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    NOTEQUALS       reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    GREATEREQUALS   reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    LESSEQUALS      reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    GREATER         reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    LESS            reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    PLUS            reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    MINUS           reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    TIMES           reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    DIV             reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    MOD             reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    ARROW           reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    SEMICOLON       reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    CLOSEPARENT     reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    CLOSESQUAREBRACKET reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)
    COLON           reduce using rule 74 (Exp -> LeftVal PLUSPLUS .)


state 119

    (71) Exp -> MINUSMINUS LeftVal .

    COMMA           reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    TERNARYIF       reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    OR              reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    AND             reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    BINARYOR        reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    BINARYAND       reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    LESSLESS        reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    GREATERGREATER  reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    EQUALS          reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    NOTEQUALS       reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    GREATEREQUALS   reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    LESSEQUALS      reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    GREATER         reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    LESS            reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    PLUS            reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    MINUS           reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    TIMES           reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    DIV             reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    MOD             reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    ARROW           reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    SEMICOLON       reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    CLOSEPARENT     reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    CLOSESQUAREBRACKET reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)
    COLON           reduce using rule 71 (Exp -> MINUSMINUS LeftVal .)


state 120

    (89) LeftVal -> ID .
    (90) LeftVal -> ID . OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    COMMA           reduce using rule 89 (LeftVal -> ID .)
    TERNARYIF       reduce using rule 89 (LeftVal -> ID .)
    OR              reduce using rule 89 (LeftVal -> ID .)
    AND             reduce using rule 89 (LeftVal -> ID .)
    BINARYOR        reduce using rule 89 (LeftVal -> ID .)
    BINARYAND       reduce using rule 89 (LeftVal -> ID .)
    LESSLESS        reduce using rule 89 (LeftVal -> ID .)
    GREATERGREATER  reduce using rule 89 (LeftVal -> ID .)
    EQUALS          reduce using rule 89 (LeftVal -> ID .)
    NOTEQUALS       reduce using rule 89 (LeftVal -> ID .)
    GREATEREQUALS   reduce using rule 89 (LeftVal -> ID .)
    LESSEQUALS      reduce using rule 89 (LeftVal -> ID .)
    GREATER         reduce using rule 89 (LeftVal -> ID .)
    LESS            reduce using rule 89 (LeftVal -> ID .)
    PLUS            reduce using rule 89 (LeftVal -> ID .)
    MINUS           reduce using rule 89 (LeftVal -> ID .)
    TIMES           reduce using rule 89 (LeftVal -> ID .)
    DIV             reduce using rule 89 (LeftVal -> ID .)
    MOD             reduce using rule 89 (LeftVal -> ID .)
    ARROW           reduce using rule 89 (LeftVal -> ID .)
    SEMICOLON       reduce using rule 89 (LeftVal -> ID .)
    CLOSEPARENT     reduce using rule 89 (LeftVal -> ID .)
    CLOSESQUAREBRACKET reduce using rule 89 (LeftVal -> ID .)
    COLON           reduce using rule 89 (LeftVal -> ID .)
    OPENSQUAREBRACKET shift and go to state 163


state 121

    (72) Exp -> PLUSPLUS LeftVal .

    COMMA           reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    TERNARYIF       reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    OR              reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    AND             reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    BINARYOR        reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    BINARYAND       reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    LESSLESS        reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    GREATERGREATER  reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    EQUALS          reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    NOTEQUALS       reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    GREATEREQUALS   reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    LESSEQUALS      reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    GREATER         reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    LESS            reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    PLUS            reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    MINUS           reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    TIMES           reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    DIV             reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    MOD             reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    ARROW           reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    SEMICOLON       reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    CLOSEPARENT     reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    CLOSESQUAREBRACKET reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)
    COLON           reduce using rule 72 (Exp -> PLUSPLUS LeftVal .)


state 122

    (75) Exp -> NOT Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    ARROW           reduce using rule 75 (Exp -> NOT Exp .)
    SEMICOLON       reduce using rule 75 (Exp -> NOT Exp .)
    CLOSEPARENT     reduce using rule 75 (Exp -> NOT Exp .)
    CLOSESQUAREBRACKET reduce using rule 75 (Exp -> NOT Exp .)
    COLON           reduce using rule 75 (Exp -> NOT Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110

  ! COMMA           [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! TERNARYIF       [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! OR              [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! AND             [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! BINARYOR        [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! BINARYAND       [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! LESSLESS        [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! GREATERGREATER  [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! EQUALS          [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! NOTEQUALS       [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! LESSEQUALS      [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! GREATER         [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! LESS            [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! PLUS            [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! MINUS           [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! TIMES           [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! DIV             [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! MOD             [ reduce using rule 75 (Exp -> NOT Exp .) ]
  ! ARROW           [ shift and go to state 111 ]


state 123

    (76) Exp -> TILDE Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    ARROW           reduce using rule 76 (Exp -> TILDE Exp .)
    SEMICOLON       reduce using rule 76 (Exp -> TILDE Exp .)
    CLOSEPARENT     reduce using rule 76 (Exp -> TILDE Exp .)
    CLOSESQUAREBRACKET reduce using rule 76 (Exp -> TILDE Exp .)
    COLON           reduce using rule 76 (Exp -> TILDE Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110

  ! COMMA           [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! TERNARYIF       [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! OR              [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! AND             [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! BINARYOR        [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! BINARYAND       [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! LESSLESS        [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! GREATERGREATER  [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! EQUALS          [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! NOTEQUALS       [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! LESSEQUALS      [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! GREATER         [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! LESS            [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! PLUS            [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! MINUS           [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! TIMES           [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! DIV             [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! MOD             [ reduce using rule 76 (Exp -> TILDE Exp .) ]
  ! ARROW           [ shift and go to state 111 ]


state 124

    (77) Exp -> NEW ID . OPENPARENT OptArgs CLOSEPARENT

    OPENPARENT      shift and go to state 164


state 125

    (19) Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .

    SEMICOLON       reduce using rule 19 (Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .)
    COMMA           reduce using rule 19 (Variable -> ID OPENSQUAREBRACKET NUMBER CLOSESQUAREBRACKET .)


state 126

    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT . SEMICOLON

    SEMICOLON       shift and go to state 165


state 127

    (34) Command -> IF OPENPARENT OptExp . CLOSEPARENT Command ELSE Command
    (35) Command -> IF OPENPARENT OptExp . CLOSEPARENT Command

    CLOSEPARENT     shift and go to state 166


state 128

    (36) Command -> WHILE OPENPARENT OptExp . CLOSEPARENT Command

    CLOSEPARENT     shift and go to state 167


state 129

    (37) Command -> DO Command WHILE . OPENPARENT OptExp CLOSEPARENT SEMICOLON

    OPENPARENT      shift and go to state 168


state 130

    (38) Command -> FOR OPENPARENT OptExp . SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command

    SEMICOLON       shift and go to state 169


state 131

    (39) Command -> FOREACH ID IN . ID Command

    ID              shift and go to state 170


state 132

    (78) Exp -> ID OPENPARENT OptArgs . CLOSEPARENT

    CLOSEPARENT     shift and go to state 171


state 133

    (85) OptArgs -> Args .
    (87) Args -> Args . COMMA Exp

    CLOSEPARENT     reduce using rule 85 (OptArgs -> Args .)
    COMMA           shift and go to state 172


state 134

    (86) OptArgs -> empty .

    CLOSEPARENT     reduce using rule 86 (OptArgs -> empty .)


state 135

    (88) Args -> Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

  ! shift/reduce conflict for COMMA resolved as shift
    CLOSEPARENT     reduce using rule 88 (Args -> Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ reduce using rule 88 (Args -> Exp .) ]


state 136

    (81) Exp -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
    (90) LeftVal -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    CLOSESQUAREBRACKET shift and go to state 173
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111


state 137

    (42) Command -> RETURN OptExp SEMICOLON .

    CLOSEBRACE      reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    IF              reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    WHILE           reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    DO              reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    FOR             reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    FOREACH         reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    BREAK           reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    CONTINUE        reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    RETURN          reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    OPENBRACE       reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    MINUSMINUS      reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    PLUSPLUS        reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    NOT             reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    TILDE           reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    NEW             reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    ID              reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    NUMBER          reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    STRING          reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    NIL             reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    SEMICOLON       reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)
    ELSE            reduce using rule 42 (Command -> RETURN OptExp SEMICOLON .)


state 138

    (47) Exp -> Exp COMMA Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    COMMA           reduce using rule 47 (Exp -> Exp COMMA Exp .)
    TERNARYIF       reduce using rule 47 (Exp -> Exp COMMA Exp .)
    OR              reduce using rule 47 (Exp -> Exp COMMA Exp .)
    AND             reduce using rule 47 (Exp -> Exp COMMA Exp .)
    BINARYOR        reduce using rule 47 (Exp -> Exp COMMA Exp .)
    BINARYAND       reduce using rule 47 (Exp -> Exp COMMA Exp .)
    LESSLESS        reduce using rule 47 (Exp -> Exp COMMA Exp .)
    GREATERGREATER  reduce using rule 47 (Exp -> Exp COMMA Exp .)
    EQUALS          reduce using rule 47 (Exp -> Exp COMMA Exp .)
    NOTEQUALS       reduce using rule 47 (Exp -> Exp COMMA Exp .)
    GREATEREQUALS   reduce using rule 47 (Exp -> Exp COMMA Exp .)
    LESSEQUALS      reduce using rule 47 (Exp -> Exp COMMA Exp .)
    GREATER         reduce using rule 47 (Exp -> Exp COMMA Exp .)
    LESS            reduce using rule 47 (Exp -> Exp COMMA Exp .)
    PLUS            reduce using rule 47 (Exp -> Exp COMMA Exp .)
    MINUS           reduce using rule 47 (Exp -> Exp COMMA Exp .)
    TIMES           reduce using rule 47 (Exp -> Exp COMMA Exp .)
    DIV             reduce using rule 47 (Exp -> Exp COMMA Exp .)
    MOD             reduce using rule 47 (Exp -> Exp COMMA Exp .)
    ARROW           reduce using rule 47 (Exp -> Exp COMMA Exp .)
    SEMICOLON       reduce using rule 47 (Exp -> Exp COMMA Exp .)
    CLOSEPARENT     reduce using rule 47 (Exp -> Exp COMMA Exp .)
    CLOSESQUAREBRACKET reduce using rule 47 (Exp -> Exp COMMA Exp .)
    COLON           reduce using rule 47 (Exp -> Exp COMMA Exp .)

  ! COMMA           [ shift and go to state 92 ]
  ! TERNARYIF       [ shift and go to state 93 ]
  ! OR              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 139

    (53) Exp -> Exp TERNARYIF Exp . COLON Exp
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    COLON           shift and go to state 174
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111


state 140

    (54) Exp -> Exp OR Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    OR              reduce using rule 54 (Exp -> Exp OR Exp .)
    AND             reduce using rule 54 (Exp -> Exp OR Exp .)
    BINARYOR        reduce using rule 54 (Exp -> Exp OR Exp .)
    BINARYAND       reduce using rule 54 (Exp -> Exp OR Exp .)
    LESSLESS        reduce using rule 54 (Exp -> Exp OR Exp .)
    GREATERGREATER  reduce using rule 54 (Exp -> Exp OR Exp .)
    EQUALS          reduce using rule 54 (Exp -> Exp OR Exp .)
    NOTEQUALS       reduce using rule 54 (Exp -> Exp OR Exp .)
    GREATEREQUALS   reduce using rule 54 (Exp -> Exp OR Exp .)
    LESSEQUALS      reduce using rule 54 (Exp -> Exp OR Exp .)
    GREATER         reduce using rule 54 (Exp -> Exp OR Exp .)
    LESS            reduce using rule 54 (Exp -> Exp OR Exp .)
    PLUS            reduce using rule 54 (Exp -> Exp OR Exp .)
    MINUS           reduce using rule 54 (Exp -> Exp OR Exp .)
    TIMES           reduce using rule 54 (Exp -> Exp OR Exp .)
    DIV             reduce using rule 54 (Exp -> Exp OR Exp .)
    MOD             reduce using rule 54 (Exp -> Exp OR Exp .)
    ARROW           reduce using rule 54 (Exp -> Exp OR Exp .)
    SEMICOLON       reduce using rule 54 (Exp -> Exp OR Exp .)
    CLOSEPARENT     reduce using rule 54 (Exp -> Exp OR Exp .)
    CLOSESQUAREBRACKET reduce using rule 54 (Exp -> Exp OR Exp .)
    COLON           reduce using rule 54 (Exp -> Exp OR Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93

  ! COMMA           [ reduce using rule 54 (Exp -> Exp OR Exp .) ]
  ! TERNARYIF       [ reduce using rule 54 (Exp -> Exp OR Exp .) ]
  ! OR              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 141

    (55) Exp -> Exp AND Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    AND             reduce using rule 55 (Exp -> Exp AND Exp .)
    BINARYOR        reduce using rule 55 (Exp -> Exp AND Exp .)
    BINARYAND       reduce using rule 55 (Exp -> Exp AND Exp .)
    LESSLESS        reduce using rule 55 (Exp -> Exp AND Exp .)
    GREATERGREATER  reduce using rule 55 (Exp -> Exp AND Exp .)
    EQUALS          reduce using rule 55 (Exp -> Exp AND Exp .)
    NOTEQUALS       reduce using rule 55 (Exp -> Exp AND Exp .)
    GREATEREQUALS   reduce using rule 55 (Exp -> Exp AND Exp .)
    LESSEQUALS      reduce using rule 55 (Exp -> Exp AND Exp .)
    GREATER         reduce using rule 55 (Exp -> Exp AND Exp .)
    LESS            reduce using rule 55 (Exp -> Exp AND Exp .)
    PLUS            reduce using rule 55 (Exp -> Exp AND Exp .)
    MINUS           reduce using rule 55 (Exp -> Exp AND Exp .)
    TIMES           reduce using rule 55 (Exp -> Exp AND Exp .)
    DIV             reduce using rule 55 (Exp -> Exp AND Exp .)
    MOD             reduce using rule 55 (Exp -> Exp AND Exp .)
    ARROW           reduce using rule 55 (Exp -> Exp AND Exp .)
    SEMICOLON       reduce using rule 55 (Exp -> Exp AND Exp .)
    CLOSEPARENT     reduce using rule 55 (Exp -> Exp AND Exp .)
    CLOSESQUAREBRACKET reduce using rule 55 (Exp -> Exp AND Exp .)
    COLON           reduce using rule 55 (Exp -> Exp AND Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94

  ! COMMA           [ reduce using rule 55 (Exp -> Exp AND Exp .) ]
  ! TERNARYIF       [ reduce using rule 55 (Exp -> Exp AND Exp .) ]
  ! OR              [ reduce using rule 55 (Exp -> Exp AND Exp .) ]
  ! AND             [ shift and go to state 95 ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 142

    (56) Exp -> Exp BINARYOR Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    BINARYOR        reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    BINARYAND       reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    LESSLESS        reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    GREATERGREATER  reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    EQUALS          reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    NOTEQUALS       reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    GREATEREQUALS   reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    LESSEQUALS      reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    GREATER         reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    LESS            reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    PLUS            reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    MINUS           reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    TIMES           reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    DIV             reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    MOD             reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    ARROW           reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    SEMICOLON       reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    CLOSEPARENT     reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    CLOSESQUAREBRACKET reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    COLON           reduce using rule 56 (Exp -> Exp BINARYOR Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95

  ! COMMA           [ reduce using rule 56 (Exp -> Exp BINARYOR Exp .) ]
  ! TERNARYIF       [ reduce using rule 56 (Exp -> Exp BINARYOR Exp .) ]
  ! OR              [ reduce using rule 56 (Exp -> Exp BINARYOR Exp .) ]
  ! AND             [ reduce using rule 56 (Exp -> Exp BINARYOR Exp .) ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 143

    (57) Exp -> Exp BINARYAND Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    BINARYAND       reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    LESSLESS        reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    GREATERGREATER  reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    EQUALS          reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    NOTEQUALS       reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    GREATEREQUALS   reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    LESSEQUALS      reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    GREATER         reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    LESS            reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    PLUS            reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    MINUS           reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    TIMES           reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    DIV             reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    MOD             reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    ARROW           reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    SEMICOLON       reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    CLOSEPARENT     reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    CLOSESQUAREBRACKET reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    COLON           reduce using rule 57 (Exp -> Exp BINARYAND Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96

  ! COMMA           [ reduce using rule 57 (Exp -> Exp BINARYAND Exp .) ]
  ! TERNARYIF       [ reduce using rule 57 (Exp -> Exp BINARYAND Exp .) ]
  ! OR              [ reduce using rule 57 (Exp -> Exp BINARYAND Exp .) ]
  ! AND             [ reduce using rule 57 (Exp -> Exp BINARYAND Exp .) ]
  ! BINARYOR        [ reduce using rule 57 (Exp -> Exp BINARYAND Exp .) ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 144

    (58) Exp -> Exp LESSLESS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    GREATERGREATER  reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    PLUS            reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    MINUS           reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    TIMES           reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    DIV             reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    MOD             reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    ARROW           reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    SEMICOLON       reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    CLOSEPARENT     reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    CLOSESQUAREBRACKET reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    COLON           reduce using rule 58 (Exp -> Exp LESSLESS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105

  ! COMMA           [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! TERNARYIF       [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! OR              [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! AND             [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! BINARYOR        [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! BINARYAND       [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! EQUALS          [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! GREATER         [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! LESS            [ reduce using rule 58 (Exp -> Exp LESSLESS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 145

    (59) Exp -> Exp GREATERGREATER Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    GREATERGREATER  reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    PLUS            reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    MINUS           reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    TIMES           reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    DIV             reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    MOD             reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    ARROW           reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    SEMICOLON       reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    CLOSEPARENT     reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    CLOSESQUAREBRACKET reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    COLON           reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105

  ! COMMA           [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! TERNARYIF       [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! OR              [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! AND             [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! BINARYOR        [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! BINARYAND       [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! EQUALS          [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! NOTEQUALS       [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! LESSEQUALS      [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! GREATER         [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! LESS            [ reduce using rule 59 (Exp -> Exp GREATERGREATER Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 146

    (60) Exp -> Exp EQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    GREATERGREATER  reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    EQUALS          reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    NOTEQUALS       reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    GREATEREQUALS   reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    LESSEQUALS      reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    GREATER         reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    LESS            reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    PLUS            reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    MINUS           reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    TIMES           reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    DIV             reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    MOD             reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    ARROW           reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    SEMICOLON       reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    CLOSEPARENT     reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    COLON           reduce using rule 60 (Exp -> Exp EQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97

  ! COMMA           [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! OR              [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! AND             [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 60 (Exp -> Exp EQUALS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 147

    (61) Exp -> Exp NOTEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    GREATERGREATER  reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    EQUALS          reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    NOTEQUALS       reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    GREATEREQUALS   reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    LESSEQUALS      reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    GREATER         reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    LESS            reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    PLUS            reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    MINUS           reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    TIMES           reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    DIV             reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    MOD             reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    ARROW           reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    SEMICOLON       reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    CLOSEPARENT     reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    COLON           reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97

  ! COMMA           [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! OR              [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! AND             [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 61 (Exp -> Exp NOTEQUALS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 148

    (62) Exp -> Exp GREATEREQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    GREATERGREATER  reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    GREATEREQUALS   reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    LESSEQUALS      reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    GREATER         reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    LESS            reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    PLUS            reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    MINUS           reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    TIMES           reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    DIV             reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    MOD             reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    ARROW           reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    SEMICOLON       reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    CLOSEPARENT     reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    COLON           reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101

  ! COMMA           [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! OR              [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! AND             [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 62 (Exp -> Exp GREATEREQUALS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 149

    (63) Exp -> Exp LESSEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    GREATERGREATER  reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    GREATEREQUALS   reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    LESSEQUALS      reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    GREATER         reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    LESS            reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    PLUS            reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    MINUS           reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    TIMES           reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    DIV             reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    MOD             reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    ARROW           reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    SEMICOLON       reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    CLOSEPARENT     reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    COLON           reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101

  ! COMMA           [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! OR              [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! AND             [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 63 (Exp -> Exp LESSEQUALS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 150

    (64) Exp -> Exp GREATER Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 64 (Exp -> Exp GREATER Exp .)
    GREATERGREATER  reduce using rule 64 (Exp -> Exp GREATER Exp .)
    GREATEREQUALS   reduce using rule 64 (Exp -> Exp GREATER Exp .)
    LESSEQUALS      reduce using rule 64 (Exp -> Exp GREATER Exp .)
    GREATER         reduce using rule 64 (Exp -> Exp GREATER Exp .)
    LESS            reduce using rule 64 (Exp -> Exp GREATER Exp .)
    PLUS            reduce using rule 64 (Exp -> Exp GREATER Exp .)
    MINUS           reduce using rule 64 (Exp -> Exp GREATER Exp .)
    TIMES           reduce using rule 64 (Exp -> Exp GREATER Exp .)
    DIV             reduce using rule 64 (Exp -> Exp GREATER Exp .)
    MOD             reduce using rule 64 (Exp -> Exp GREATER Exp .)
    ARROW           reduce using rule 64 (Exp -> Exp GREATER Exp .)
    SEMICOLON       reduce using rule 64 (Exp -> Exp GREATER Exp .)
    CLOSEPARENT     reduce using rule 64 (Exp -> Exp GREATER Exp .)
    CLOSESQUAREBRACKET reduce using rule 64 (Exp -> Exp GREATER Exp .)
    COLON           reduce using rule 64 (Exp -> Exp GREATER Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101

  ! COMMA           [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! TERNARYIF       [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! OR              [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! AND             [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! BINARYOR        [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! BINARYAND       [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! EQUALS          [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! NOTEQUALS       [ reduce using rule 64 (Exp -> Exp GREATER Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 151

    (65) Exp -> Exp LESS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    LESSLESS        reduce using rule 65 (Exp -> Exp LESS Exp .)
    GREATERGREATER  reduce using rule 65 (Exp -> Exp LESS Exp .)
    GREATEREQUALS   reduce using rule 65 (Exp -> Exp LESS Exp .)
    LESSEQUALS      reduce using rule 65 (Exp -> Exp LESS Exp .)
    GREATER         reduce using rule 65 (Exp -> Exp LESS Exp .)
    LESS            reduce using rule 65 (Exp -> Exp LESS Exp .)
    PLUS            reduce using rule 65 (Exp -> Exp LESS Exp .)
    MINUS           reduce using rule 65 (Exp -> Exp LESS Exp .)
    TIMES           reduce using rule 65 (Exp -> Exp LESS Exp .)
    DIV             reduce using rule 65 (Exp -> Exp LESS Exp .)
    MOD             reduce using rule 65 (Exp -> Exp LESS Exp .)
    ARROW           reduce using rule 65 (Exp -> Exp LESS Exp .)
    SEMICOLON       reduce using rule 65 (Exp -> Exp LESS Exp .)
    CLOSEPARENT     reduce using rule 65 (Exp -> Exp LESS Exp .)
    CLOSESQUAREBRACKET reduce using rule 65 (Exp -> Exp LESS Exp .)
    COLON           reduce using rule 65 (Exp -> Exp LESS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101

  ! COMMA           [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! TERNARYIF       [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! OR              [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! AND             [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! BINARYOR        [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! BINARYAND       [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! EQUALS          [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 65 (Exp -> Exp LESS Exp .) ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 152

    (66) Exp -> Exp PLUS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    PLUS            reduce using rule 66 (Exp -> Exp PLUS Exp .)
    MINUS           reduce using rule 66 (Exp -> Exp PLUS Exp .)
    TIMES           reduce using rule 66 (Exp -> Exp PLUS Exp .)
    DIV             reduce using rule 66 (Exp -> Exp PLUS Exp .)
    MOD             reduce using rule 66 (Exp -> Exp PLUS Exp .)
    ARROW           reduce using rule 66 (Exp -> Exp PLUS Exp .)
    SEMICOLON       reduce using rule 66 (Exp -> Exp PLUS Exp .)
    CLOSEPARENT     reduce using rule 66 (Exp -> Exp PLUS Exp .)
    CLOSESQUAREBRACKET reduce using rule 66 (Exp -> Exp PLUS Exp .)
    COLON           reduce using rule 66 (Exp -> Exp PLUS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105

  ! COMMA           [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! TERNARYIF       [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! OR              [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! AND             [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! BINARYOR        [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! BINARYAND       [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! LESSLESS        [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! EQUALS          [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! GREATER         [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! LESS            [ reduce using rule 66 (Exp -> Exp PLUS Exp .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 153

    (67) Exp -> Exp MINUS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    PLUS            reduce using rule 67 (Exp -> Exp MINUS Exp .)
    MINUS           reduce using rule 67 (Exp -> Exp MINUS Exp .)
    TIMES           reduce using rule 67 (Exp -> Exp MINUS Exp .)
    DIV             reduce using rule 67 (Exp -> Exp MINUS Exp .)
    MOD             reduce using rule 67 (Exp -> Exp MINUS Exp .)
    ARROW           reduce using rule 67 (Exp -> Exp MINUS Exp .)
    SEMICOLON       reduce using rule 67 (Exp -> Exp MINUS Exp .)
    CLOSEPARENT     reduce using rule 67 (Exp -> Exp MINUS Exp .)
    CLOSESQUAREBRACKET reduce using rule 67 (Exp -> Exp MINUS Exp .)
    COLON           reduce using rule 67 (Exp -> Exp MINUS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105

  ! COMMA           [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! TERNARYIF       [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! OR              [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! AND             [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! BINARYOR        [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! BINARYAND       [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! LESSLESS        [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! EQUALS          [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! GREATER         [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! LESS            [ reduce using rule 67 (Exp -> Exp MINUS Exp .) ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 154

    (68) Exp -> Exp TIMES Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    TIMES           reduce using rule 68 (Exp -> Exp TIMES Exp .)
    DIV             reduce using rule 68 (Exp -> Exp TIMES Exp .)
    MOD             reduce using rule 68 (Exp -> Exp TIMES Exp .)
    ARROW           reduce using rule 68 (Exp -> Exp TIMES Exp .)
    SEMICOLON       reduce using rule 68 (Exp -> Exp TIMES Exp .)
    CLOSEPARENT     reduce using rule 68 (Exp -> Exp TIMES Exp .)
    CLOSESQUAREBRACKET reduce using rule 68 (Exp -> Exp TIMES Exp .)
    COLON           reduce using rule 68 (Exp -> Exp TIMES Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! COMMA           [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! TERNARYIF       [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! OR              [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! AND             [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! BINARYOR        [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! BINARYAND       [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! LESSLESS        [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! GREATERGREATER  [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! EQUALS          [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! NOTEQUALS       [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! LESSEQUALS      [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! GREATER         [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! LESS            [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! PLUS            [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! MINUS           [ reduce using rule 68 (Exp -> Exp TIMES Exp .) ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 155

    (69) Exp -> Exp DIV Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    TIMES           reduce using rule 69 (Exp -> Exp DIV Exp .)
    DIV             reduce using rule 69 (Exp -> Exp DIV Exp .)
    MOD             reduce using rule 69 (Exp -> Exp DIV Exp .)
    ARROW           reduce using rule 69 (Exp -> Exp DIV Exp .)
    SEMICOLON       reduce using rule 69 (Exp -> Exp DIV Exp .)
    CLOSEPARENT     reduce using rule 69 (Exp -> Exp DIV Exp .)
    CLOSESQUAREBRACKET reduce using rule 69 (Exp -> Exp DIV Exp .)
    COLON           reduce using rule 69 (Exp -> Exp DIV Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! COMMA           [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! TERNARYIF       [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! OR              [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! AND             [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! BINARYOR        [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! BINARYAND       [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! LESSLESS        [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! GREATERGREATER  [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! EQUALS          [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! NOTEQUALS       [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! LESSEQUALS      [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! GREATER         [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! LESS            [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! PLUS            [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! MINUS           [ reduce using rule 69 (Exp -> Exp DIV Exp .) ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 156

    (70) Exp -> Exp MOD Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    TIMES           reduce using rule 70 (Exp -> Exp MOD Exp .)
    DIV             reduce using rule 70 (Exp -> Exp MOD Exp .)
    MOD             reduce using rule 70 (Exp -> Exp MOD Exp .)
    ARROW           reduce using rule 70 (Exp -> Exp MOD Exp .)
    SEMICOLON       reduce using rule 70 (Exp -> Exp MOD Exp .)
    CLOSEPARENT     reduce using rule 70 (Exp -> Exp MOD Exp .)
    CLOSESQUAREBRACKET reduce using rule 70 (Exp -> Exp MOD Exp .)
    COLON           reduce using rule 70 (Exp -> Exp MOD Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! COMMA           [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! TERNARYIF       [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! OR              [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! AND             [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! BINARYOR        [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! BINARYAND       [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! LESSLESS        [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! GREATERGREATER  [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! EQUALS          [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! NOTEQUALS       [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! LESSEQUALS      [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! GREATER         [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! LESS            [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! PLUS            [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! MINUS           [ reduce using rule 70 (Exp -> Exp MOD Exp .) ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 157

    (79) Exp -> Exp ARROW ID . OPENPARENT OptArgs CLOSEPARENT

    OPENPARENT      shift and go to state 175


state 158

    (48) Exp -> LeftVal ATRIB Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    TERNARYIF       reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    OR              reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    AND             reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    BINARYOR        reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    BINARYAND       reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    LESSLESS        reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    GREATERGREATER  reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    EQUALS          reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    NOTEQUALS       reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    GREATEREQUALS   reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    LESSEQUALS      reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    GREATER         reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    LESS            reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    PLUS            reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    MINUS           reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    TIMES           reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    DIV             reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    MOD             reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    ARROW           reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    SEMICOLON       reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    CLOSEPARENT     reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    CLOSESQUAREBRACKET reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    COLON           reduce using rule 48 (Exp -> LeftVal ATRIB Exp .)
    COMMA           shift and go to state 92

  ! COMMA           [ reduce using rule 48 (Exp -> LeftVal ATRIB Exp .) ]
  ! TERNARYIF       [ shift and go to state 93 ]
  ! OR              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 159

    (49) Exp -> LeftVal PLUSEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BINARYOR resolved as shift
  ! shift/reduce conflict for BINARYAND resolved as shift
  ! shift/reduce conflict for LESSLESS resolved as shift
  ! shift/reduce conflict for GREATERGREATER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQUALS resolved as shift
  ! shift/reduce conflict for LESSEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ARROW resolved as shift
    SEMICOLON       reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .)
    CLOSEPARENT     reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .)
    COLON           reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! OR              [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! AND             [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! LESSLESS        [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! GREATER         [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! LESS            [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! PLUS            [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! MINUS           [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! TIMES           [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! DIV             [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! MOD             [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]
  ! ARROW           [ reduce using rule 49 (Exp -> LeftVal PLUSEQUALS Exp .) ]


state 160

    (50) Exp -> LeftVal MINUSEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BINARYOR resolved as shift
  ! shift/reduce conflict for BINARYAND resolved as shift
  ! shift/reduce conflict for LESSLESS resolved as shift
  ! shift/reduce conflict for GREATERGREATER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQUALS resolved as shift
  ! shift/reduce conflict for LESSEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ARROW resolved as shift
    SEMICOLON       reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .)
    CLOSEPARENT     reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .)
    COLON           reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! OR              [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! AND             [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! LESSLESS        [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! GREATER         [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! LESS            [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! PLUS            [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! MINUS           [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! TIMES           [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! DIV             [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! MOD             [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]
  ! ARROW           [ reduce using rule 50 (Exp -> LeftVal MINUSEQUALS Exp .) ]


state 161

    (51) Exp -> LeftVal TIMESEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BINARYOR resolved as shift
  ! shift/reduce conflict for BINARYAND resolved as shift
  ! shift/reduce conflict for LESSLESS resolved as shift
  ! shift/reduce conflict for GREATERGREATER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQUALS resolved as shift
  ! shift/reduce conflict for LESSEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ARROW resolved as shift
    SEMICOLON       reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .)
    CLOSEPARENT     reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .)
    COLON           reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! OR              [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! AND             [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! LESSLESS        [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! GREATER         [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! LESS            [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! PLUS            [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! MINUS           [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! TIMES           [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! DIV             [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! MOD             [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]
  ! ARROW           [ reduce using rule 51 (Exp -> LeftVal TIMESEQUALS Exp .) ]


state 162

    (52) Exp -> LeftVal DIVEQUALS Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for TERNARYIF resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for BINARYOR resolved as shift
  ! shift/reduce conflict for BINARYAND resolved as shift
  ! shift/reduce conflict for LESSLESS resolved as shift
  ! shift/reduce conflict for GREATERGREATER resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for NOTEQUALS resolved as shift
  ! shift/reduce conflict for GREATEREQUALS resolved as shift
  ! shift/reduce conflict for LESSEQUALS resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for ARROW resolved as shift
    SEMICOLON       reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .)
    CLOSEPARENT     reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .)
    CLOSESQUAREBRACKET reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .)
    COLON           reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! TERNARYIF       [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! OR              [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! AND             [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! BINARYOR        [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! BINARYAND       [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! LESSLESS        [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! GREATERGREATER  [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! EQUALS          [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! NOTEQUALS       [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! GREATEREQUALS   [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! LESSEQUALS      [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! GREATER         [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! LESS            [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! PLUS            [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! MINUS           [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! TIMES           [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! DIV             [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! MOD             [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]
  ! ARROW           [ reduce using rule 52 (Exp -> LeftVal DIVEQUALS Exp .) ]


state 163

    (90) LeftVal -> ID OPENSQUAREBRACKET . Exp CLOSESQUAREBRACKET
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 176
    LeftVal                        shift and go to state 69

state 164

    (77) Exp -> NEW ID OPENPARENT . OptArgs CLOSEPARENT
    (85) OptArgs -> . Args
    (86) OptArgs -> . empty
    (87) Args -> . Args COMMA Exp
    (88) Args -> . Exp
    (91) empty -> .
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    CLOSEPARENT     reduce using rule 91 (empty -> .)
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    OptArgs                        shift and go to state 177
    Args                           shift and go to state 133
    empty                          shift and go to state 134
    Exp                            shift and go to state 135
    LeftVal                        shift and go to state 69

state 165

    (13) MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .

    CLOSEBRACE      reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
    STATIC          reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
    VAR             reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)
    DEF             reduce using rule 13 (MemberDefinition -> OptModifier DEF ID OPENPARENT OptFormArgsList CLOSEPARENT SEMICOLON .)


state 166

    (34) Command -> IF OPENPARENT OptExp CLOSEPARENT . Command ELSE Command
    (35) Command -> IF OPENPARENT OptExp CLOSEPARENT . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 57
    Command                        shift and go to state 178
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 167

    (36) Command -> WHILE OPENPARENT OptExp CLOSEPARENT . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 57
    Command                        shift and go to state 179
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 168

    (37) Command -> DO Command WHILE OPENPARENT . OptExp CLOSEPARENT SEMICOLON
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 180
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 169

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON . OptExp SEMICOLON OptExp CLOSEPARENT Command
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 181
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 170

    (39) Command -> FOREACH ID IN ID . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    Command                        shift and go to state 182
    OptExp                         shift and go to state 57
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 171

    (78) Exp -> ID OPENPARENT OptArgs CLOSEPARENT .

    COMMA           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    TERNARYIF       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    OR              reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    AND             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYOR        reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYAND       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSLESS        reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATERGREATER  reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    EQUALS          reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    NOTEQUALS       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATEREQUALS   reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSEQUALS      reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATER         reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    LESS            reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    PLUS            reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    MINUS           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    TIMES           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    DIV             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    MOD             reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    ARROW           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    SEMICOLON       reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSEPARENT     reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSESQUAREBRACKET reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)
    COLON           reduce using rule 78 (Exp -> ID OPENPARENT OptArgs CLOSEPARENT .)


state 172

    (87) Args -> Args COMMA . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 183
    LeftVal                        shift and go to state 69

state 173

    (81) Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .
    (90) LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .

    COMMA           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    TERNARYIF       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    OR              reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    AND             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    BINARYOR        reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    BINARYAND       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESSLESS        reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATERGREATER  reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    EQUALS          reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    NOTEQUALS       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATEREQUALS   reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESSEQUALS      reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATER         reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESS            reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    PLUS            reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MINUS           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    TIMES           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    DIV             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MOD             reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    ARROW           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    SEMICOLON       reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    CLOSEPARENT     reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    CLOSESQUAREBRACKET reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    COLON           reduce using rule 81 (Exp -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    ATRIB           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    PLUSEQUALS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MINUSEQUALS     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    TIMESEQUALS     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    DIVEQUALS       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MINUSMINUS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    PLUSPLUS        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)


state 174

    (53) Exp -> Exp TERNARYIF Exp COLON . Exp
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 184
    LeftVal                        shift and go to state 69

state 175

    (79) Exp -> Exp ARROW ID OPENPARENT . OptArgs CLOSEPARENT
    (85) OptArgs -> . Args
    (86) OptArgs -> . empty
    (87) Args -> . Args COMMA Exp
    (88) Args -> . Exp
    (91) empty -> .
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    CLOSEPARENT     reduce using rule 91 (empty -> .)
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77

    Exp                            shift and go to state 135
    OptArgs                        shift and go to state 185
    Args                           shift and go to state 133
    empty                          shift and go to state 134
    LeftVal                        shift and go to state 69

state 176

    (90) LeftVal -> ID OPENSQUAREBRACKET Exp . CLOSESQUAREBRACKET
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    CLOSESQUAREBRACKET shift and go to state 186
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111


state 177

    (77) Exp -> NEW ID OPENPARENT OptArgs . CLOSEPARENT

    CLOSEPARENT     shift and go to state 187


state 178

    (34) Command -> IF OPENPARENT OptExp CLOSEPARENT Command . ELSE Command
    (35) Command -> IF OPENPARENT OptExp CLOSEPARENT Command .

    CLOSEBRACE      reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    IF              reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    WHILE           reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    DO              reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    FOR             reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    FOREACH         reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    BREAK           reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    CONTINUE        reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    RETURN          reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    OPENBRACE       reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    MINUSMINUS      reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    PLUSPLUS        reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    NOT             reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    TILDE           reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    NEW             reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    ID              reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    NUMBER          reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    STRING          reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    NIL             reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    SEMICOLON       reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)
    ELSE            reduce using rule 35 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command .)

  ! ELSE            [ shift and go to state 188 ]


state 179

    (36) Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .

    CLOSEBRACE      reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    IF              reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    WHILE           reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    DO              reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    FOR             reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    FOREACH         reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    BREAK           reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    CONTINUE        reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    RETURN          reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    OPENBRACE       reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    MINUSMINUS      reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    PLUSPLUS        reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    NOT             reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    TILDE           reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    NEW             reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    ID              reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    NUMBER          reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    STRING          reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    NIL             reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    SEMICOLON       reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)
    ELSE            reduce using rule 36 (Command -> WHILE OPENPARENT OptExp CLOSEPARENT Command .)


state 180

    (37) Command -> DO Command WHILE OPENPARENT OptExp . CLOSEPARENT SEMICOLON

    CLOSEPARENT     shift and go to state 189


state 181

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp . SEMICOLON OptExp CLOSEPARENT Command

    SEMICOLON       shift and go to state 190


state 182

    (39) Command -> FOREACH ID IN ID Command .

    CLOSEBRACE      reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    IF              reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    WHILE           reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    DO              reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    FOR             reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    FOREACH         reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    BREAK           reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    CONTINUE        reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    RETURN          reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    OPENBRACE       reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    MINUSMINUS      reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    PLUSPLUS        reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    NOT             reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    TILDE           reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    NEW             reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    ID              reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    NUMBER          reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    STRING          reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    NIL             reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    SEMICOLON       reduce using rule 39 (Command -> FOREACH ID IN ID Command .)
    ELSE            reduce using rule 39 (Command -> FOREACH ID IN ID Command .)


state 183

    (87) Args -> Args COMMA Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    COMMA           reduce using rule 87 (Args -> Args COMMA Exp .)
    CLOSEPARENT     reduce using rule 87 (Args -> Args COMMA Exp .)
    TERNARYIF       shift and go to state 93
    OR              shift and go to state 94
    AND             shift and go to state 95
    BINARYOR        shift and go to state 96
    BINARYAND       shift and go to state 97
    LESSLESS        shift and go to state 98
    GREATERGREATER  shift and go to state 99
    EQUALS          shift and go to state 100
    NOTEQUALS       shift and go to state 101
    GREATEREQUALS   shift and go to state 102
    LESSEQUALS      shift and go to state 103
    GREATER         shift and go to state 104
    LESS            shift and go to state 105
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107
    TIMES           shift and go to state 108
    DIV             shift and go to state 109
    MOD             shift and go to state 110
    ARROW           shift and go to state 111

  ! COMMA           [ shift and go to state 92 ]


state 184

    (53) Exp -> Exp TERNARYIF Exp COLON Exp .
    (47) Exp -> Exp . COMMA Exp
    (53) Exp -> Exp . TERNARYIF Exp COLON Exp
    (54) Exp -> Exp . OR Exp
    (55) Exp -> Exp . AND Exp
    (56) Exp -> Exp . BINARYOR Exp
    (57) Exp -> Exp . BINARYAND Exp
    (58) Exp -> Exp . LESSLESS Exp
    (59) Exp -> Exp . GREATERGREATER Exp
    (60) Exp -> Exp . EQUALS Exp
    (61) Exp -> Exp . NOTEQUALS Exp
    (62) Exp -> Exp . GREATEREQUALS Exp
    (63) Exp -> Exp . LESSEQUALS Exp
    (64) Exp -> Exp . GREATER Exp
    (65) Exp -> Exp . LESS Exp
    (66) Exp -> Exp . PLUS Exp
    (67) Exp -> Exp . MINUS Exp
    (68) Exp -> Exp . TIMES Exp
    (69) Exp -> Exp . DIV Exp
    (70) Exp -> Exp . MOD Exp
    (79) Exp -> Exp . ARROW ID OPENPARENT OptArgs CLOSEPARENT

    OR              reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    AND             reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    BINARYOR        reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    BINARYAND       reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    LESSLESS        reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    GREATERGREATER  reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    EQUALS          reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    NOTEQUALS       reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    GREATEREQUALS   reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    LESSEQUALS      reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    GREATER         reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    LESS            reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    PLUS            reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    MINUS           reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    TIMES           reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    DIV             reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    MOD             reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    ARROW           reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    SEMICOLON       reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    CLOSEPARENT     reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    CLOSESQUAREBRACKET reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    COLON           reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .)
    COMMA           shift and go to state 92
    TERNARYIF       shift and go to state 93

  ! COMMA           [ reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
  ! TERNARYIF       [ reduce using rule 53 (Exp -> Exp TERNARYIF Exp COLON Exp .) ]
  ! OR              [ shift and go to state 94 ]
  ! AND             [ shift and go to state 95 ]
  ! BINARYOR        [ shift and go to state 96 ]
  ! BINARYAND       [ shift and go to state 97 ]
  ! LESSLESS        [ shift and go to state 98 ]
  ! GREATERGREATER  [ shift and go to state 99 ]
  ! EQUALS          [ shift and go to state 100 ]
  ! NOTEQUALS       [ shift and go to state 101 ]
  ! GREATEREQUALS   [ shift and go to state 102 ]
  ! LESSEQUALS      [ shift and go to state 103 ]
  ! GREATER         [ shift and go to state 104 ]
  ! LESS            [ shift and go to state 105 ]
  ! PLUS            [ shift and go to state 106 ]
  ! MINUS           [ shift and go to state 107 ]
  ! TIMES           [ shift and go to state 108 ]
  ! DIV             [ shift and go to state 109 ]
  ! MOD             [ shift and go to state 110 ]
  ! ARROW           [ shift and go to state 111 ]


state 185

    (79) Exp -> Exp ARROW ID OPENPARENT OptArgs . CLOSEPARENT

    CLOSEPARENT     shift and go to state 191


state 186

    (90) LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .

    COMMA           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    TERNARYIF       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    OR              reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    AND             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    BINARYOR        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    BINARYAND       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESSLESS        reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATERGREATER  reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    EQUALS          reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    NOTEQUALS       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATEREQUALS   reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESSEQUALS      reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    GREATER         reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    LESS            reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    PLUS            reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MINUS           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    TIMES           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    DIV             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    MOD             reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    ARROW           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    SEMICOLON       reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    CLOSEPARENT     reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    CLOSESQUAREBRACKET reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)
    COLON           reduce using rule 90 (LeftVal -> ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET .)


state 187

    (77) Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .

    COMMA           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    TERNARYIF       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    OR              reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    AND             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYOR        reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYAND       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSLESS        reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATERGREATER  reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    EQUALS          reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    NOTEQUALS       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATEREQUALS   reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSEQUALS      reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATER         reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESS            reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    PLUS            reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    MINUS           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    TIMES           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    DIV             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    MOD             reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    ARROW           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    SEMICOLON       reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSEPARENT     reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSESQUAREBRACKET reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)
    COLON           reduce using rule 77 (Exp -> NEW ID OPENPARENT OptArgs CLOSEPARENT .)


state 188

    (34) Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 57
    Command                        shift and go to state 192
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 189

    (37) Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT . SEMICOLON

    SEMICOLON       shift and go to state 193


state 190

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON . OptExp CLOSEPARENT Command
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    CLOSEPARENT     reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 194
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 191

    (79) Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .

    COMMA           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    TERNARYIF       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    OR              reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    AND             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYOR        reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    BINARYAND       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSLESS        reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATERGREATER  reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    EQUALS          reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    NOTEQUALS       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATEREQUALS   reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESSEQUALS      reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    GREATER         reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    LESS            reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    PLUS            reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    MINUS           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    TIMES           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    DIV             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    MOD             reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    ARROW           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    SEMICOLON       reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSEPARENT     reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    CLOSESQUAREBRACKET reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)
    COLON           reduce using rule 79 (Exp -> Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT .)


state 192

    (34) Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .

    CLOSEBRACE      reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    IF              reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    WHILE           reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    DO              reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    FOR             reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    FOREACH         reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    BREAK           reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    CONTINUE        reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    RETURN          reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    OPENBRACE       reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    MINUSMINUS      reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    PLUSPLUS        reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    NOT             reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    TILDE           reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    NEW             reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    ID              reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    NUMBER          reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    STRING          reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    NIL             reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    SEMICOLON       reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)
    ELSE            reduce using rule 34 (Command -> IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command .)


state 193

    (37) Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .

    CLOSEBRACE      reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    IF              reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    WHILE           reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    DO              reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    FOR             reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    FOREACH         reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    BREAK           reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    CONTINUE        reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    RETURN          reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    OPENBRACE       reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    MINUSMINUS      reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    PLUSPLUS        reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    NOT             reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    TILDE           reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    NEW             reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    ID              reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    NUMBER          reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    STRING          reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    NIL             reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    SEMICOLON       reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)
    ELSE            reduce using rule 37 (Command -> DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON .)


state 194

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp . CLOSEPARENT Command

    CLOSEPARENT     shift and go to state 195


state 195

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT . Command
    (34) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command ELSE Command
    (35) Command -> . IF OPENPARENT OptExp CLOSEPARENT Command
    (36) Command -> . WHILE OPENPARENT OptExp CLOSEPARENT Command
    (37) Command -> . DO Command WHILE OPENPARENT OptExp CLOSEPARENT SEMICOLON
    (38) Command -> . FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command
    (39) Command -> . FOREACH ID IN ID Command
    (40) Command -> . BREAK SEMICOLON
    (41) Command -> . CONTINUE SEMICOLON
    (42) Command -> . RETURN OptExp SEMICOLON
    (43) Command -> . OptExp SEMICOLON
    (44) Command -> . Block
    (45) OptExp -> . Exp
    (46) OptExp -> . empty
    (31) Block -> . OPENBRACE CommandList CLOSEBRACE
    (47) Exp -> . Exp COMMA Exp
    (48) Exp -> . LeftVal ATRIB Exp
    (49) Exp -> . LeftVal PLUSEQUALS Exp
    (50) Exp -> . LeftVal MINUSEQUALS Exp
    (51) Exp -> . LeftVal TIMESEQUALS Exp
    (52) Exp -> . LeftVal DIVEQUALS Exp
    (53) Exp -> . Exp TERNARYIF Exp COLON Exp
    (54) Exp -> . Exp OR Exp
    (55) Exp -> . Exp AND Exp
    (56) Exp -> . Exp BINARYOR Exp
    (57) Exp -> . Exp BINARYAND Exp
    (58) Exp -> . Exp LESSLESS Exp
    (59) Exp -> . Exp GREATERGREATER Exp
    (60) Exp -> . Exp EQUALS Exp
    (61) Exp -> . Exp NOTEQUALS Exp
    (62) Exp -> . Exp GREATEREQUALS Exp
    (63) Exp -> . Exp LESSEQUALS Exp
    (64) Exp -> . Exp GREATER Exp
    (65) Exp -> . Exp LESS Exp
    (66) Exp -> . Exp PLUS Exp
    (67) Exp -> . Exp MINUS Exp
    (68) Exp -> . Exp TIMES Exp
    (69) Exp -> . Exp DIV Exp
    (70) Exp -> . Exp MOD Exp
    (71) Exp -> . MINUSMINUS LeftVal
    (72) Exp -> . PLUSPLUS LeftVal
    (73) Exp -> . LeftVal MINUSMINUS
    (74) Exp -> . LeftVal PLUSPLUS
    (75) Exp -> . NOT Exp
    (76) Exp -> . TILDE Exp
    (77) Exp -> . NEW ID OPENPARENT OptArgs CLOSEPARENT
    (78) Exp -> . ID OPENPARENT OptArgs CLOSEPARENT
    (79) Exp -> . Exp ARROW ID OPENPARENT OptArgs CLOSEPARENT
    (80) Exp -> . ID
    (81) Exp -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET
    (82) Exp -> . NUMBER
    (83) Exp -> . STRING
    (84) Exp -> . NIL
    (91) empty -> .
    (89) LeftVal -> . ID
    (90) LeftVal -> . ID OPENSQUAREBRACKET Exp CLOSESQUAREBRACKET

    IF              shift and go to state 56
    WHILE           shift and go to state 58
    DO              shift and go to state 59
    FOR             shift and go to state 60
    FOREACH         shift and go to state 61
    BREAK           shift and go to state 63
    CONTINUE        shift and go to state 64
    RETURN          shift and go to state 65
    OPENBRACE       shift and go to state 41
    MINUSMINUS      shift and go to state 70
    PLUSPLUS        shift and go to state 71
    NOT             shift and go to state 72
    TILDE           shift and go to state 73
    NEW             shift and go to state 74
    ID              shift and go to state 62
    NUMBER          shift and go to state 75
    STRING          shift and go to state 76
    NIL             shift and go to state 77
    SEMICOLON       reduce using rule 91 (empty -> .)

    OptExp                         shift and go to state 57
    Command                        shift and go to state 196
    Block                          shift and go to state 66
    Exp                            shift and go to state 67
    empty                          shift and go to state 68
    LeftVal                        shift and go to state 69

state 196

    (38) Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .

    CLOSEBRACE      reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    IF              reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    WHILE           reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    DO              reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    FOR             reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    FOREACH         reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    BREAK           reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    CONTINUE        reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    RETURN          reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    OPENBRACE       reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    MINUSMINUS      reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    PLUSPLUS        reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    NOT             reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    TILDE           reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    NEW             reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    ID              reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    NUMBER          reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    STRING          reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    NIL             reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    SEMICOLON       reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)
    ELSE            reduce using rule 38 (Command -> FOR OPENPARENT OptExp SEMICOLON OptExp SEMICOLON OptExp CLOSEPARENT Command .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 8 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 135 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 159 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 159 resolved as shift
WARNING: shift/reduce conflict for OR in state 159 resolved as shift
WARNING: shift/reduce conflict for AND in state 159 resolved as shift
WARNING: shift/reduce conflict for BINARYOR in state 159 resolved as shift
WARNING: shift/reduce conflict for BINARYAND in state 159 resolved as shift
WARNING: shift/reduce conflict for LESSLESS in state 159 resolved as shift
WARNING: shift/reduce conflict for GREATERGREATER in state 159 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 159 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 159 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUALS in state 159 resolved as shift
WARNING: shift/reduce conflict for LESSEQUALS in state 159 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 159 resolved as shift
WARNING: shift/reduce conflict for LESS in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 159 resolved as shift
WARNING: shift/reduce conflict for DIV in state 159 resolved as shift
WARNING: shift/reduce conflict for MOD in state 159 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 159 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 160 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 160 resolved as shift
WARNING: shift/reduce conflict for OR in state 160 resolved as shift
WARNING: shift/reduce conflict for AND in state 160 resolved as shift
WARNING: shift/reduce conflict for BINARYOR in state 160 resolved as shift
WARNING: shift/reduce conflict for BINARYAND in state 160 resolved as shift
WARNING: shift/reduce conflict for LESSLESS in state 160 resolved as shift
WARNING: shift/reduce conflict for GREATERGREATER in state 160 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 160 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 160 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUALS in state 160 resolved as shift
WARNING: shift/reduce conflict for LESSEQUALS in state 160 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 160 resolved as shift
WARNING: shift/reduce conflict for LESS in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 160 resolved as shift
WARNING: shift/reduce conflict for DIV in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 160 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 161 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for BINARYOR in state 161 resolved as shift
WARNING: shift/reduce conflict for BINARYAND in state 161 resolved as shift
WARNING: shift/reduce conflict for LESSLESS in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATERGREATER in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for LESSEQUALS in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 161 resolved as shift
WARNING: shift/reduce conflict for LESS in state 161 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 161 resolved as shift
WARNING: shift/reduce conflict for DIV in state 161 resolved as shift
WARNING: shift/reduce conflict for MOD in state 161 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 161 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 162 resolved as shift
WARNING: shift/reduce conflict for TERNARYIF in state 162 resolved as shift
WARNING: shift/reduce conflict for OR in state 162 resolved as shift
WARNING: shift/reduce conflict for AND in state 162 resolved as shift
WARNING: shift/reduce conflict for BINARYOR in state 162 resolved as shift
WARNING: shift/reduce conflict for BINARYAND in state 162 resolved as shift
WARNING: shift/reduce conflict for LESSLESS in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATERGREATER in state 162 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for LESSEQUALS in state 162 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 162 resolved as shift
WARNING: shift/reduce conflict for LESS in state 162 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 162 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 162 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 162 resolved as shift
WARNING: shift/reduce conflict for DIV in state 162 resolved as shift
WARNING: shift/reduce conflict for MOD in state 162 resolved as shift
WARNING: shift/reduce conflict for ARROW in state 162 resolved as shift
